; Generated by Coffee-AHK/0.0.52
global __rf_script__ := Func("script_72")
global __ci_script__ := Func("script_71")

#KeyHistory, 0
#MaxThreads, 20
#NoEnv
#Persistent
#SingleInstance, Force
#UseHook, On

CoordMode, Mouse, Client
CoordMode, Pixel, Client
CoordMode, ToolTip, Client
SendMode, Event
SetBatchLines, 100ms
SetKeyDelay, 0, 50
SetMouseDelay, 0, 50
StringCaseSense, On

global __script_module_1__ := (Func("script_70")).Call()
global __script_module_6__ := (Func("script_68")).Call()
global __script_module_9__ := (Func("script_66")).Call()
global __script_module_13__ := (Func("script_64")).Call()
global __script_module_14__ := (Func("script_62")).Call()
global __script_module_15__ := (Func("script_60")).Call()
global __script_module_16__ := (Func("script_58")).Call()
global __script_module_17__ := (Func("script_56")).Call()
global __script_module_26__ := (Func("script_54")).Call()
global __script_module_27__ := (Func("script_52")).Call()
global __script_module_8__ := (Func("script_50")).Call()
global __script_module_18__ := (Func("script_48")).Call()
global __script_module_19__ := (Func("script_46")).Call()
global __script_module_20__ := (Func("script_44")).Call()
global __script_module_22__ := (Func("script_42")).Call()
global __script_module_24__ := (Func("script_40")).Call()
global __script_module_11__ := (Func("script_39")).Call()
global __script_module_12__ := (Func("script_37")).Call()
global __script_module_21__ := (Func("script_35")).Call()
global __script_module_10__ := (Func("script_33")).Call()
global __script_module_23__ := (Func("script_31")).Call()
global __script_module_25__ := (Func("script_29")).Call()
global __script_module_4__ := (Func("script_25")).Call()
global $filter := __script_module_23__
global $forEach := __script_module_24__
global $formatHotkey := __script_module_25__
global $noop := __script_module_26__
global $push := __script_module_12__
global $replace := __script_module_13__
global $split := __script_module_14__
class KeyBindingShell {
  __New() {
    this.mapBound := {}
    this.mapCallback := {}
  }
  add := Func("script_21").Bind(this)
  fire := Func("script_19").Bind(this)
  formatKey := Func("script_16").Bind(this)
  prevent := Func("script_15").Bind(this)
  register := Func("script_14").Bind(this)
  remove := Func("script_13").Bind(this)
}
__rf_script__.Call($noop, "#rf/script/1").Call(KeyBindingShell)
global __script_module_7__ := (Func("script_11")).Call()
global __script_module_2__ := (Func("script_10")).Call()
global __script_module_3__ := (Func("script_9")).Call()
global __script_module_5__ := (Func("script_8")).Call()
global $exit := __script_module_1__
global $off := __script_module_2__
global $on := __script_module_3__
global $press := __script_module_4__
global $preventInput := __script_module_5__
global $reload := __script_module_6__
(Func("script_7")).Call()
script_1() {
  __rf_script__.Call($off, "#rf/script/2").Call("1")
  __rf_script__.Call($preventInput, "#rf/script/3").Call("1", false)
}
script_2() {
  return __rf_script__.Call($press, "#rf/script/4").Call("2")
}
script_3() {
  __rf_script__.Call($on, "#rf/script/5").Call("1", Func("script_2"))
  __rf_script__.Call($preventInput, "#rf/script/6").Call("1", true)
}
script_4() {
  return __rf_script__.Call($off, "#rf/script/7").Call("1")
}
script_5() {
  return __rf_script__.Call($press, "#rf/script/8").Call("2")
}
script_6() {
  return __rf_script__.Call($on, "#rf/script/9").Call("1", Func("script_5"))
}
script_7() {
  __rf_script__.Call($on, "#rf/script/10").Call("f4", $exit)
  __rf_script__.Call($on, "#rf/script/11").Call("f5", $reload)
  __rf_script__.Call($on, "#rf/script/12").Call("f2", Func("script_6"))
  __rf_script__.Call($on, "#rf/script/13").Call("f3", Func("script_4"))
  __rf_script__.Call($on, "#rf/script/14").Call("f6", Func("script_3"))
  __rf_script__.Call($on, "#rf/script/15").Call("f7", Func("script_1"))
}
script_8() {
  $keyBindingXShell := __script_module_7__
  return $keyBindingXShell.prevent
}
script_9() {
  $keyBindingXShell := __script_module_7__
  return $keyBindingXShell.add
}
script_10() {
  $keyBindingXShell := __script_module_7__
  return $keyBindingXShell.remove
}
script_11() {
  return new KeyBindingShell()
}
script_12($name, $item) {
  return $item[1] != $name
}
script_13(this, key) {
  __array__ := __rf_script__.Call($split, "#rf/script/16").Call(key, ".")
  $key := __array__[1]
  $name := __array__[2]
  if !($name) {
    this.mapCallback[__ci_script__.Call($key)] := []
    return
  }
  $listNew := __rf_script__.Call($filter, "#rf/script/17").Call(this.mapCallback[__ci_script__.Call($key)], Func("script_12").Bind($name))
  this.mapCallback[__ci_script__.Call($key)] := $listNew
  return
}
script_14(this, key, callback, action) {
  $key := __rf_script__.Call(this.formatKey, "#rf/script/18").Call(key, "~")
  __rf_script__.Call($noop, "#rf/script/19").Call($key, callback)
  if (action) {
    Hotkey, % $key, % callback, On
  } else {
    Hotkey, % $key, % callback, Off
  }
  return
}
script_15(this, key, isPrevented) {
  $key := __rf_script__.Call(this.formatKey, "#rf/script/20").Call(key)
  __rf_script__.Call($noop, "#rf/script/21").Call($key)
  if (isPrevented) {
    Hotkey, % $key, % $noop, On
  } else {
    Hotkey, % $key, % $noop, Off
  }
  return
}
script_16(this, key, prefix := "") {
  $key := __rf_script__.Call($formatHotkey, "#rf/script/22").Call(__rf_script__.Call($replace, "#rf/script/23").Call(key, ":down", ""))
  if !(prefix) {
    return $key
  }
  return "" . (prefix) . "" . ($key) . ""
}
script_17(it) {
  return __rf_script__.Call(it[2], "#rf/script/24").Call()
}
script_18($name, it) {
  return it[1] == $name
}
script_19(this, key) {
  __array__ := __rf_script__.Call($split, "#rf/script/25").Call((__rf_script__.Call($replace, "#rf/script/26").Call(key, ":down", "")), ".")
  $key := __array__[1]
  $name := __array__[2]
  $list := this.mapCallback[__ci_script__.Call($key)]
  if ($name) {
    $list := __rf_script__.Call($filter, "#rf/script/27").Call($list, Func("script_18").Bind($name))
  }
  __rf_script__.Call($forEach, "#rf/script/28").Call($list, Func("script_17"))
}
script_20(key, this) {
  return __rf_script__.Call(this.fire, "#rf/script/29").Call(key)
}
script_21(this, key, callback) {
  __array__ := __rf_script__.Call($split, "#rf/script/30").Call(key, ".")
  $key := __array__[1]
  $name := __array__[2]
  if !(this.mapCallback[__ci_script__.Call($key)]) {
    this.mapCallback[__ci_script__.Call($key)] := []
    $fn := Func("script_20").Bind(key, this)
    this.mapBound[__ci_script__.Call($key)] := $fn
    __rf_script__.Call(this.register, "#rf/script/31").Call($key, $fn, true)
  }
  __rf_script__.Call($push, "#rf/script/32").Call(this.mapCallback[__ci_script__.Call($key)], [$name, callback])
  return
}
script_22($validateInputPress, $formatInputPress, $length, $includes, $trim, listInput*) {
  if !(__rf_script__.Call($validateInputPress, "#rf/script/33").Call(listInput)) {
    return
  }
  $listKey := __rf_script__.Call($formatInputPress, "#rf/script/34").Call(listInput)
  $listResult := []
  $len := __rf_script__.Call($length, "#rf/script/35").Call($listKey)
  for $i, $key in $listKey {
    $i := $i - 1
    if ($i == $len - 1) {
      $listResult[__ci_script__.Call($i)] := __rf_script__.Call($split, "#rf/script/36").Call($key, ":")
      continue
    }
    if (__rf_script__.Call($includes, "#rf/script/37").Call($key, ":")) {
      $listResult[__ci_script__.Call($i)] := __rf_script__.Call($split, "#rf/script/38").Call($key, ":")
      $listResult[__ci_script__.Call(($len - 1) * 2 - $i)] := __rf_script__.Call($split, "#rf/script/39").Call($key, ":")
    } else {
      $listResult[__ci_script__.Call($i)] := [$key, "down"]
      $listResult[__ci_script__.Call(($len - 1) * 2 - $i)] := [$key, "up"]
    }
  }
  for $i, $it in $listResult {
    $i := $i - 1
    if ($it[1] == "win") {
      $it[1] := "lwin"
    }
    $listResult[__ci_script__.Call($i)] := __rf_script__.Call($trim, "#rf/script/40").Call("" . ($it[1]) . " " . ($it[2]) . "")
  }
  $result := ""
  for __index_for__, $it in $listResult {
    $result := "" . ($result) . "{" . ($it) . "}"
  }
  Send, % $result
  return
}
script_23($length, $includes, $click, listInput) {
  if !(__rf_script__.Call($length, "#rf/script/41").Call(listInput)) {
    return false
  }
  $key := listInput[1]
  if (__rf_script__.Call($includes, "#rf/script/42").Call($key, "-button")) {
    $key := __rf_script__.Call($replace, "#rf/script/43").Call($key, "l-button", "left")
    $key := __rf_script__.Call($replace, "#rf/script/44").Call($key, "m-button", "middle")
    $key := __rf_script__.Call($replace, "#rf/script/45").Call($key, "r-button", "right")
    __rf_script__.Call($click, "#rf/script/46").Call($key)
    return false
  }
  return true
}
script_24($createList, $toLowerCase, listInput) {
  $listKey := __rf_script__.Call($createList, "#rf/script/47").Call("string")
  for __index_for__, $input in listInput {
    $ipt := __rf_script__.Call($toLowerCase, "#rf/script/48").Call($input)
    $ipt := __rf_script__.Call($replace, "#rf/script/49").Call($ipt, " ", "")
    $ipt := __rf_script__.Call($replace, "#rf/script/50").Call($ipt, "-", "")
    __rf_script__.Call($push, "#rf/script/51").Call($listKey, (__rf_script__.Call($split, "#rf/script/52").Call($ipt, "+"))*)
  }
  return $listKey
}
script_25() {
  $click := __script_module_8__
  $createList := __script_module_9__
  $includes := __script_module_10__
  $length := __script_module_11__
  $push := __script_module_12__
  $replace := __script_module_13__
  $split := __script_module_14__
  $toLowerCase := __script_module_15__
  $trim := __script_module_16__
  $formatInputPress := Func("script_24").Bind($createList, $toLowerCase)
  $validateInputPress := Func("script_23").Bind($length, $includes, $click)
  return Func("script_22").Bind($validateInputPress, $formatInputPress, $length, $includes, $trim)
}
script_26($formatKeyFormatHotkey, $pickPrefixFormatHotkey, $trim, key) {
  $listKey := __rf_script__.Call($formatKeyFormatHotkey, "#rf/script/53").Call(key)
  __array__ := __rf_script__.Call($pickPrefixFormatHotkey, "#rf/script/54").Call($listKey)
  $prefix := __array__[1]
  $listKey := __array__[2]
  $result := ""
  for __index_for__, $it in $listKey {
    $result := "" . ($result) . " & " . ($it) . ""
  }
  return __rf_script__.Call($replace, "#rf/script/55").Call("" . ($prefix) . "" . (__rf_script__.Call($trim, "#rf/script/56").Call($result, " &")) . "", ":", " ")
}
script_27($length, $createList, listKey) {
  if ((__rf_script__.Call($length, "#rf/script/57").Call(listKey)) == 1) {
    return ["", listKey]
  }
  $prefix := ""
  $listNew := __rf_script__.Call($createList, "#rf/script/58").Call("string")
  for __index_for__, $key in listKey {
    if ($key == "alt") {
      $prefix := "" . ($prefix) . "!"
      continue
    }
    if ($key == "ctrl") {
      $prefix := "" . ($prefix) . "^"
      continue
    }
    if ($key == "shift") {
      $prefix := "" . ($prefix) . "+"
      continue
    }
    if ($key == "win") {
      $prefix := "" . ($prefix) . "#"
      continue
    }
    __rf_script__.Call($push, "#rf/script/59").Call($listNew, $key)
  }
  return [$prefix, $listNew]
}
script_28($createList, $toLowerCase, $length, key) {
  $listKey := __rf_script__.Call($createList, "#rf/script/60").Call("string")
  $key := __rf_script__.Call($toLowerCase, "#rf/script/61").Call(key)
  $key := __rf_script__.Call($replace, "#rf/script/62").Call($key, " ", "")
  $key := __rf_script__.Call($replace, "#rf/script/63").Call($key, "-", "")
  $listSplit := __rf_script__.Call($split, "#rf/script/64").Call($key, "+")
  if (__rf_script__.Call($length, "#rf/script/65").Call($listSplit)) {
    __rf_script__.Call($push, "#rf/script/66").Call($listKey, $listSplit*)
  }
  return $listKey
}
script_29() {
  $createList := __script_module_9__
  $length := __script_module_11__
  $push := __script_module_12__
  $replace := __script_module_13__
  $split := __script_module_14__
  $toLowerCase := __script_module_15__
  $trim := __script_module_16__
  $formatKeyFormatHotkey := Func("script_28").Bind($createList, $toLowerCase, $length)
  $pickPrefixFormatHotkey := Func("script_27").Bind($length, $createList)
  return Func("script_26").Bind($formatKeyFormatHotkey, $pickPrefixFormatHotkey, $trim)
}
script_30(list, callback) {
  $listResult := []
  for $i, $item in list {
    $i := $i - 1
    if !(__rf_script__.Call(callback, "#rf/script/67").Call($item, $i)) {
      continue
    }
    __rf_script__.Call($push, "#rf/script/68").Call($listResult, $item)
  }
  return $listResult
}
script_31() {
  $push := __script_module_12__
  return Func("script_30")
}
script_32($getType, $isString, $isNumber, $toString, $isArray, ipt, needle) {
  $type := __rf_script__.Call($getType, "#rf/script/69").Call(ipt)
  if ((__rf_script__.Call($isString, "#rf/script/70").Call(ipt)) || __rf_script__.Call($isNumber, "#rf/script/71").Call(ipt)) {
    if !(__rf_script__.Call($isString, "#rf/script/72").Call(needle)) {
      return false
    }
    return (InStr((__rf_script__.Call($toString, "#rf/script/73").Call(ipt)), needle)) > 0
  }
  if (__rf_script__.Call($isArray, "#rf/script/74").Call(ipt)) {
    for __index_for__, $it in ipt {
      if ($it == needle) {
        return true
      }
    }
    return false
  }
  throw "$.includes: invalid type '" . ($type) . "'"
}
script_33() {
  $getType := __script_module_17__
  $isArray := __script_module_18__
  $isNumber := __script_module_19__
  $isString := __script_module_20__
  $toString := __script_module_21__
  return Func("script_32").Bind($getType, $isString, $isNumber, $toString, $isArray)
}
script_34($isString, $isNumber, $isArray, $toString, $trim, $isObject, $getType, ipt) {
  if (__rf_script__.Call($isString, "#rf/script/75").Call(ipt)) {
    return ipt
  }
  if (__rf_script__.Call($isNumber, "#rf/script/76").Call(ipt)) {
    return "" . (ipt) . ""
  }
  if (__rf_script__.Call($isArray, "#rf/script/77").Call(ipt)) {
    $result := ""
    for __index_for__, it in ipt {
      $result := "" . ($result) . ", " . (__rf_script__.Call($toString, "#rf/script/78").Call(it)) . ""
    }
    return "[" . (__rf_script__.Call($trim, "#rf/script/79").Call($result, " ,")) . "]"
  }
  if (__rf_script__.Call($isObject, "#rf/script/80").Call(ipt)) {
    $result := ""
    for key, value in ipt {
      $result := "" . ($result) . ", " . (key) . ": " . (__rf_script__.Call($toString, "#rf/script/81").Call(value)) . ""
    }
    return "{" . (__rf_script__.Call($trim, "#rf/script/82").Call($result, " ,")) . "}"
  }
  throw "$toString: invalid type '" . (__rf_script__.Call($getType, "#rf/script/83").Call(ipt)) . "'"
}
script_35() {
  $getType := __script_module_17__
  $isArray := __script_module_18__
  $isNumber := __script_module_19__
  $isObject := __script_module_22__
  $isString := __script_module_20__
  $trim := __script_module_16__
  $toString := Func("script_34").Bind($isString, $isNumber, $isArray, $toString, $trim, $isObject, $getType)
  return $toString
}
script_36($isArray, $getType, list, value*) {
  if !(__rf_script__.Call($isArray, "#rf/script/84").Call(list)) {
    throw "$.push: invalid type '" . (__rf_script__.Call($getType, "#rf/script/85").Call(list)) . "'"
  }
  for __index_for__, $v in value {
    list.Push($v)
  }
  return list.Length()
}
script_37() {
  $getType := __script_module_17__
  $isArray := __script_module_18__
  return Func("script_36").Bind($isArray, $getType)
}
script_38($isArray, $isObject, $isString, $getType, ipt) {
  if (__rf_script__.Call($isArray, "#rf/script/86").Call(ipt)) {
    return ipt.Length()
  }
  if (__rf_script__.Call($isObject, "#rf/script/87").Call(ipt)) {
    return ipt.Count()
  }
  if (__rf_script__.Call($isString, "#rf/script/88").Call(ipt)) {
    return StrLen(ipt)
  }
  throw "$.length: invalid type '" . (__rf_script__.Call($getType, "#rf/script/89").Call(ipt)) . "'"
}
script_39() {
  $getType := __script_module_17__
  $isArray := __script_module_18__
  $isObject := __script_module_22__
  $isString := __script_module_20__
  return Func("script_38").Bind($isArray, $isObject, $isString, $getType)
}
script_40() {
  $each := __script_module_27__
  return $each
}
script_41($getType, ipt) {
  $type := __rf_script__.Call($getType, "#rf/script/90").Call(ipt)
  if !($type == "object") {
    return false
  }
  return true
}
script_42() {
  $getType := __script_module_17__
  return Func("script_41").Bind($getType)
}
script_43($getType, ipt) {
  $type := __rf_script__.Call($getType, "#rf/script/91").Call(ipt)
  if !($type == "string") {
    return false
  }
  return true
}
script_44() {
  $getType := __script_module_17__
  return Func("script_43").Bind($getType)
}
script_45($getType, ipt) {
  $type := __rf_script__.Call($getType, "#rf/script/92").Call(ipt)
  if !($type == "number") {
    return false
  }
  return true
}
script_46() {
  $getType := __script_module_17__
  return Func("script_45").Bind($getType)
}
script_47($getType, ipt) {
  $type := __rf_script__.Call($getType, "#rf/script/93").Call(ipt)
  if !($type == "array") {
    return false
  }
  return true
}
script_48() {
  $getType := __script_module_17__
  return Func("script_47").Bind($getType)
}
script_49(key := "left") {
  key := __rf_script__.Call($replace, "#rf/script/94").Call(key, "-", "")
  key := __rf_script__.Call($replace, "#rf/script/95").Call(key, ":", " ")
  Click, % key
  return
}
script_50() {
  $replace := __script_module_13__
  return Func("script_49")
}
script_51(list, callback) {
  for $i, $item in list {
    $i := $i - 1
    __rf_script__.Call(callback, "#rf/script/96").Call($item, $i)
  }
  return
}
script_52() {
  return Func("script_51")
}
script_53(args*) {
  return
}
script_54() {
  return Func("script_53")
}
script_55(ipt) {
  if ipt is Number
    return "number"
  if (IsFunc(ipt)) {
    return "function"
  }
  if (IsObject(ipt)) {
    if (ipt.Count() == ipt.Length()) {
      if !(ipt.Length() >= 0) {
        return "function"
      }
      return "array"
    }
    return "object"
  }
  return "string"
}
script_56() {
  return Func("script_55")
}
script_57(ipt, omitting := " `t") {
  return Trim(ipt, omitting)
}
script_58() {
  return Func("script_57")
}
script_59(ipt) {
  $result := ipt
  StringLower, $result, ipt
  return $result
}
script_60() {
  return Func("script_59")
}
script_61(ipt, delimiter) {
  return StrSplit(ipt, delimiter)
}
script_62() {
  return Func("script_61")
}
script_63(ipt, searchment, replacement, limit := -1) {
  return StrReplace(ipt, searchment, replacement, limit)
}
script_64() {
  return Func("script_63")
}
script_65($type := "unknown") {
  return []
}
script_66() {
  return Func("script_65")
}
script_67() {
  Reload
  return
}
script_68() {
  return Func("script_67")
}
script_69() {
  ExitApp
  return
}
script_70() {
  return Func("script_69")
}
script_71(__ipt__) {
  if __ipt__ is Number
    return __ipt__ + 1
  return __ipt__
}
script_72(__fn__, __token__) {
  if (__fn__) {
    return __fn__
  }
  throw Exception("invalid function: " . (__token__) . "")
}
