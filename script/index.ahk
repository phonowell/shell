; Generated by Coffee-AHK/0.0.37
; Generated by Coffee-AHK/0.0.37
global __ci_shell__ := Func("shell_90")
global $ := {}
$.abs := Func("shell_89")
$.alert := Func("shell_88")
$.beep := Func("shell_87")
$.bind := Func("shell_86")
$.blockInput := Func("shell_85")
$.ceil := Func("shell_84")
$.chunk := Func("shell_83")
$.clearInterval := Func("shell_82")
$.clearTimeout := Func("shell_81")
$.click := Func("shell_80")
$.clone := Func("shell_79")
$.compact := Func("shell_78")
$.concat := Func("shell_77")
global __iDebounce__ := 0
global __tDebounce__ := {}
$.debounce := Func("shell_76")
$.defer := Func("shell_74")
$.delay := Func("shell_72")
$.drop := Func("shell_70")
class EmitterShellX {
  bus := []
  emit := Func("shell_69").Bind(this)
  off := Func("shell_68").Bind(this)
  on := Func("shell_67").Bind(this)
}
$.emitter := Func("shell_66")
$.exit := Func("shell_65")
class FileShellX {
  name := ""
  __New(name) {
    this.name := name
  }
  append := Func("shell_64").Bind(this)
  exist := Func("shell_63").Bind(this)
  delete := Func("shell_62").Bind(this)
  load := Func("shell_61").Bind(this)
  save := Func("shell_60").Bind(this)
}
$.file := Func("shell_59")
$.findColor := Func("shell_58")
$.findImage := Func("shell_57")
$.first := Func("shell_56")
$.floor := Func("shell_55")
$.formatHotkey := Func("shell_54")
$.getColor := Func("shell_53")
$.getPosition := Func("shell_52")
$.getState := Func("shell_51")
$.i := Func("shell_50")
$.includes := Func("shell_49")
$.info := Func("shell_48")
$.isArray := Func("shell_47")
$.isFunction := Func("shell_46")
$.isNumber := Func("shell_45")
$.isObject := Func("shell_44")
$.isString := Func("shell_43")
$.join := Func("shell_42")
class KeyBindingShellX {
  mapBound := {}
  mapCallback := {}
  add := Func("shell_41").Bind(this)
  fire := Func("shell_40").Bind(this)
  init := Func("shell_39").Bind(this)
  off := Func("shell_37").Bind(this)
  on := Func("shell_36").Bind(this)
  remove := Func("shell_35").Bind(this)
}
global keyBindingShell := new KeyBindingShellX()
$.off := keyBindingShell.remove
$.on := keyBindingShell.add
$.trigger := keyBindingShell.fire
$.last := Func("shell_34")
$.length := Func("shell_33")
$.move := Func("shell_32")
$.now := Func("shell_31")
$.nth := Func("shell_30")
global __cacheOnce__ := {}
global __indexOnce__ := 0
$.once := Func("shell_29").Bind(args)
$.open := Func("shell_27")
$.play := Func("shell_26")
$.press := Func("shell_25")
$.push := Func("shell_24")
$.random := Func("shell_23")
$.reload := Func("shell_22")
$.replace := Func("shell_21")
$.reverse := Func("shell_20")
$.round := Func("shell_19")
$.setFixed := Func("shell_18")
$.setInterval := Func("shell_17")
$.setTimeout := Func("shell_16")
$.sleep := Func("shell_15")
$.split := Func("shell_14")
$.suspend := Func("shell_13")
$.tail := Func("shell_12")
$.take := Func("shell_11")
global __iThrottle__ := 0
global __tThrottle__ := {}
global __tsThrottle__ := {}
$.throttle := Func("shell_10")
$.toLowerCase := Func("shell_7")
$.toString := Func("shell_6")
$.toUpperCase := Func("shell_5")
$.trim := Func("shell_4")
$.trimEnd := Func("shell_3")
$.trimStart := Func("shell_2")
$.type := Func("shell_1")
$.VERSION := "0.0.4"
shell_1(input) {
  if input is Number
    return "number"
  if (IsFunc(input)) {
    return "function"
  }
  if (IsObject(input)) {
    if (input.Count() == input.Length()) {
      if !(input.Length() >= 0) {
        return "function"
      }
      return "array"
    }
    return "object"
  }
  return "string"
}
shell_2(input, omitting := " `t") {
  return LTrim(input, omitting)
}
shell_3(input, omitting := " `t") {
  return RTrim(input, omitting)
}
shell_4(input, omitting := " `t") {
  return Trim(input, omitting)
}
shell_5(input) {
  StringUpper, __result__, input
  return __result__
}
shell_6(input) {
  __type__ := $.type.Call(input)
  if (__type__ == "array") {
    __result__ := ""
    for __index_for__, key in input {
      __result__ := "" . (__result__) . ", " . ($.toString.Call(key)) . ""
    }
    return "[" . ($.trim.Call(__result__, " ,")) . "]"
  } else if (__type__ == "object") {
    __result__ := ""
    for key, value in input {
      __result__ := "" . (__result__) . ", " . (key) . ": " . ($.toString.Call(value)) . ""
    }
    return "{" . ($.trim.Call(__result__, " ,")) . "}"
  }
  return input
}
shell_7(input) {
  StringLower, __result__, input
  return __result__
}
shell_8(callback, index) {
  callback.Call()
  __tsThrottle__[__ci_shell__.Call(index)] := $.now.Call()
}
shell_9(callback, time, index) {
  $.clearTimeout.Call(__tThrottle__[__ci_shell__.Call(index)])
  __tThrottle__[__ci_shell__.Call(index)] := $.setTimeout.Call(Func("shell_8").Bind(callback, index), __tsThrottle__[__ci_shell__.Call(index)] - $.now.Call() + time)
}
shell_10(time, callback) {
  __iThrottle__++
  __tsThrottle__[__ci_shell__.Call(__iThrottle__)] := 0
  return Func("shell_9").Bind(callback, time, __iThrottle__)
}
shell_11(list, count := 1) {
  if !($.isArray.Call(list)) {
    throw Exception("$.take: invalid type")
  }
  __len__ := $.length.Call(list)
  if !(__len__) {
    return []
  }
  if !(count >= 0) {
    return []
  }
  if (count >= __len__) {
    count := __len__
  }
  __listNew__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if (__i__ >= count) {
      break
    }
    $.push.Call(__listNew__, __item__)
  }
  return __listNew__
}
shell_12(list) {
  if !($.isArray.Call(list)) {
    throw Exception("$.tail: invalid type")
  }
  return $.drop.Call(list, 1)
}
shell_13(isSuspended := "Toggle") {
  if (isSuspended != "Toggle") {
    if (isSuspended) {
      isSuspended := "On"
    } else {
      isSuspended := "Off"
    }
  }
  Suspend, % isSuspended
}
shell_14(input, delimiter) {
  return StrSplit(input, delimiter)
}
shell_15(time) {
  Sleep, % time
}
shell_16(callback, time) {
  if ($.isFunction.Call(callback)) {
    callback := $.bind.Call(callback)
  }
  if !($.isNumber.Call(time)) {
    throw Exception("$.setTimeout: invalid type")
  }
  if (time <= 0) {
    time := 1
  }
  SetTimer, % callback, % 0 - time
  return callback
}
shell_17(callback, time) {
  if ($.isFunction.Call(callback)) {
    callback := callback.Bind()
  }
  if !($.isNumber.Call(time)) {
    throw Exception("$.setInterval: invalid type")
  }
  if !(time > 0) {
    throw Exception("$.setInterval: invalid value")
  }
  SetTimer, % callback, % time
  return callback
}
shell_18(isFixed := "Toggle") {
  if (isFixed != "Toggle") {
    if (isFixed) {
      isFixed := "On"
    } else {
      isFixed := "Off"
    }
  }
  Winset AlwaysOnTop, % isFixed, A
}
shell_19(n) {
  return Round(n)
}
shell_20(list) {
  if !($.isArray.Call(list)) {
    throw Exception("$.reverse: invalid type")
  }
  __len__ := $.length.Call(list)
  __listNew__ := []
  for __i__, __key__ in list {
    __i__ := __i__ - 1
    __listNew__[__ci_shell__.Call(__len__ - 1 - __i__)] := __key__
  }
  return __listNew__
}
shell_21(input, searchment, replacement, limit := -1) {
  return StrReplace(input, searchment, replacement, limit)
}
shell_22() {
  Reload
}
shell_23(min := 0, max := 1) {
  Random, __result__, min, max
  return __result__
}
shell_24(list, args*) {
  if !($.isArray.Call(list)) {
    throw Exception("$.push: invalid type")
  }
  for __index_for__, __arg__ in args {
    list.Push(__arg__)
  }
  return list
}
shell_25(listInput*) {
  if !($.length.Call(listInput)) {
    throw Exception("$.press: invalid key")
  }
  __listKey__ := []
  for __index_for__, __input__ in listInput {
    __ipt__ := $.toLowerCase.Call(__input__)
    __ipt__ := $.replace.Call(__ipt__, " ", "")
    __ipt__ := $.replace.Call(__ipt__, "-", "")
    __list__ := $.split.Call(__ipt__, "+")
    for __index_for__, __it__ in __list__ {
      $.push.Call(__listKey__, __it__)
    }
  }
  __listResult__ := []
  __len__ := $.length.Call(__listKey__)
  for __i__, __key__ in __listKey__ {
    __i__ := __i__ - 1
    if (__i__ == __len__ - 1) {
      __listResult__[__ci_shell__.Call(__i__)] := $.split.Call(__key__, ":")
      continue
    }
    if ($.includes.Call(__key__, ":")) {
      __listResult__[__ci_shell__.Call(__i__)] := $.split.Call(__key__, ":")
      __listResult__[__ci_shell__.Call((__len__ - 1) * 2 - __i__)] := $.split.Call(__key__, ":")
    } else {
      __listResult__[__ci_shell__.Call(__i__)] := [__key__, "down"]
      __listResult__[__ci_shell__.Call((__len__ - 1) * 2 - __i__)] := [__key__, "up"]
    }
  }
  for __i__, __it__ in __listResult__ {
    __i__ := __i__ - 1
    if (__it__[1] == "win") {
      __it__[1] := "lwin"
    }
    __listResult__[__ci_shell__.Call(__i__)] := $.trim.Call("" . (__it__[1]) . " " . (__it__[2]) . "")
  }
  __result__ := ""
  for __index_for__, __it__ in __listResult__ {
    __result__ := "" . (__result__) . "{" . (__it__) . "}"
  }
  Send, % __result__
}
shell_26(filename) {
  SoundPlay, % filename
}
shell_27(source) {
  Run, % source
}
shell_28(__i__, callback, args*) {
  if (__cacheOnce__[__ci_shell__.Call(__i__)][1]) {
    return __cacheOnce__[__ci_shell__.Call(__i__)][2]
  }
  __result__ := callback.Call(args*)
  __cacheOnce__[__ci_shell__.Call(__i__)] := [true, __result__]
  return __result__
}
shell_29(args, callback) {
  if !($.isFunction.Call(callback)) {
    throw Exception("$.once: invalid type")
  }
  __i__ := __indexOnce__
  __indexOnce__++
  __cacheOnce__[__ci_shell__.Call(__i__)] := [false, ""]
  return Func("shell_28").Bind(__i__, callback)
}
shell_30(list, n := 0) {
  if !($.isArray.Call(list)) {
    throw Exception("$.nth: invalid type")
  }
  if !($.isNumber.Call(n)) {
    throw Exception("$.nth: invalid type")
  }
  if (n >= 0) {
    return list[__ci_shell__.Call(n)]
  } else {
    return list[__ci_shell__.Call(($.length.Call(list)) + n)]
  }
}
shell_31() {
  return A_TickCount
}
shell_32(point := "", speed := 0) {
  if !(point) {
    throw Exception("$.move: invalid point")
  }
  MouseMove, point[1], point[2], speed
}
shell_33(input) {
  __type__ := $.type.Call(input)
  switch __type__ {
    case "array": {
      return input.Length()
    }
    case "object": {
      return input.Count()
    }
    case "string": {
      return StrLen(input)
    }
    default: {
      throw Exception("$.length: invalid type '" . (__type__) . "'")
    }
  }
}
shell_34(list) {
  if !($.isArray.Call(list)) {
    throw Exception("$.last: invalid type")
  }
  return list[__ci_shell__.Call(($.length.Call(list)) - 1)]
}
shell_35(this, key) {
  __array__ := $.split.Call(key, ".")
  key := __array__[1]
  __name__ := __array__[2]
  if !(__name__) {
    this.mapCallback[__ci_shell__.Call(key)] := ""
    this.off.Call(key, this.mapBound[__ci_shell__.Call(key)])
    return $
  }
  __listNew__ := []
  for __index_for__, __item__ in this.mapCallback[__ci_shell__.Call(key)] {
    if (__item__[1] == __name__) {
      continue
    }
    $.push.Call(__listNew__, __item__)
  }
  if !($.length.Call(__listNew__)) {
    this.mapCallback[__ci_shell__.Call(key)] := ""
    this.off.Call(key, this.mapBound[__ci_shell__.Call(key)])
    return $
  }
  this.mapCallback[__ci_shell__.Call(key)] := __listNew__
  return $
}
shell_36(this, key, callback) {
  key := $.formatHotkey.Call(key)
  Hotkey, % key, % callback, On
  return $
}
shell_37(this, key, callback) {
  key := $.formatHotkey.Call(key)
  Hotkey, % key, % callback, Off
  return $
}
shell_38(key, this) {
  this.fire.Call(key)
}
shell_39(this, key) {
  if (this.mapCallback[__ci_shell__.Call(key)]) {
    return $
  }
  this.mapCallback[__ci_shell__.Call(key)] := []
  __fn__ := Func("shell_38").Bind(key, this)
  this.mapBound[__ci_shell__.Call(key)] := __fn__
  this.on.Call(key, __fn__)
}
shell_40(this, key) {
  __array__ := $.split.Call(($.replace.Call(key, ":down", "")), ".")
  key := __array__[1]
  __name__ := __array__[2]
  if !(__name__) {
    for __index_for__, __item__ in this.mapCallback[__ci_shell__.Call(key)] {
      __item__[2].Call()
    }
    return $
  }
  for __index_for__, __item__ in this.mapCallback[__ci_shell__.Call(key)] {
    if !(__item__[1] == __name__) {
      continue
    }
    __item__[2].Call()
  }
  return $
}
shell_41(this, key, callback) {
  __array__ := $.split.Call(key, ".")
  key := __array__[1]
  __name__ := __array__[2]
  this.init.Call(key)
  $.push.Call(this.mapCallback[__ci_shell__.Call(key)], [__name__, callback])
  return $
}
shell_42(list, seperator := "") {
  if !($.isArray.Call(list)) {
    throw Exception("$.join: invalid type")
  }
  __result__ := ""
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if !(__i__) {
      __result__ := __item__
      continue
    }
    __result__ := "" . (__result__) . "" . (seperator) . "" . (__item__) . ""
  }
  return __result__
}
shell_43(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "string") {
    return false
  }
  return true
}
shell_44(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "object") {
    return false
  }
  return true
}
shell_45(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "number") {
    return false
  }
  return true
}
shell_46(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "function") {
    return false
  }
  return true
}
shell_47(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "array") {
    return false
  }
  return true
}
shell_48(message, point := "") {
  if !(message) {
    return message
  }
  if !(point) {
    point := $.getPosition.Call()
  }
  __msg__ := $.toString.Call(message)
  ToolTip, % __msg__, % point[1], % point[2]
  return message
}
shell_49(input, needle) {
  __type__ := $.type.Call(input)
  if (__type__ == "string" || __type__ == "number") {
    return (InStr(input, needle)) > 0
  }
  if (__type__ == "array") {
    for __index_for__, __it__ in input {
      if (__it__ == needle) {
        return true
      }
    }
    return false
  }
  throw Exception("$.includes: invalid type '" . (__type__) . "'")
}
shell_50(message) {
  $.info.Call("[" . ($.now.Call()) . "] " . ($.toString.Call(message)) . "", [0, 0])
  return message
}
shell_51(key) {
  key := $.formatHotkey.Call(key)
  return GetKeyState(key, "P")
}
shell_52() {
  MouseGetPos, __x__, __y__
  return [__x__, __y__]
}
shell_53(point := "") {
  if !(point) {
    point := $.getPosition.Call()
  }
  PixelGetColor, __result__, % point[1], % point[2], RGB
  return __result__
}
shell_54(key) {
  __listKey__ := []
  __key__ := $.toLowerCase.Call(key)
  __key__ := $.replace.Call(__key__, " ", "")
  __key__ := $.replace.Call(__key__, "-", "")
  for __index_for__, __it__ in $.split.Call(__key__, "+") {
    $.push.Call(__listKey__, __it__)
  }
  __isAlt__ := false
  __isCtrl__ := false
  __isShift__ := false
  __isWin__ := false
  __listResult__ := []
  for __index_for__, key in __listKey__ {
    if (key == "alt") {
      __isAlt__ := true
      continue
    }
    if (key == "ctrl") {
      __isCtrl__ := true
      continue
    }
    if (key == "shift") {
      __isShift__ := true
      continue
    }
    if (key == "win") {
      __isWin__ := true
      continue
    }
    $.push.Call(__listResult__, key)
  }
  __prefix__ := ""
  if (__isAlt__) {
    __prefix__ := "" . (__prefix__) . "!"
  }
  if (__isCtrl__) {
    __prefix__ := "" . (__prefix__) . "^"
  }
  if (__isShift__) {
    __prefix__ := "" . (__prefix__) . "+"
  }
  if (__isWin__) {
    __prefix__ := "" . (__prefix__) . "#"
  }
  __result__ := ""
  for __index_for__, __it__ in __listResult__ {
    __result__ := "" . (__result__) . " & " . (__it__) . ""
  }
  return $.replace.Call("" . (__prefix__) . "" . ($.trim.Call(__result__, " &")) . "", ":", " ")
}
shell_55(n) {
  return Floor(n)
}
shell_56(list) {
  if !($.isArray.Call(list)) {
    throw Exception("$.first: invalid type")
  }
  return list[1]
}
shell_57(source, start := "", end := "") {
  if !(start) {
    start := [0, 0]
  }
  if !(end) {
    end := [A_ScreenWidth, A_ScreenHeight]
  }
  ImageSearch __x__, __y__, start[1], start[2], end[1], end[2], % A_ScriptDir . "\\\" . source
  return [__x__, __y__]
}
shell_58(color, start := "", end := "", variation := 0) {
  if !(start) {
    start := [0, 0]
  }
  if !(end) {
    end := [A_ScreenWidth, A_ScreenHeight]
  }
  PixelSearch __x__, __y__, start[1], start[2], end[1], end[2], color, variation, Fast RGB
  return [__x__, __y__]
}
shell_59(name) {
  return new FileShellX(name)
}
shell_60(this, content) {
  this.delete.Call()
  return this.append.Call(content)
}
shell_61(this) {
  if !(this.exist.Call()) {
    return ""
  }
  FileRead, __result__, % this.name
  return $.replace.Call(__result__, "`r", "")
}
shell_62(this) {
  if !(this.exist.Call()) {
    return this
  }
  FileDelete, % this.name
  return this
}
shell_63(this) {
  if !(FileExist(this.name)) {
    return false
  }
  return true
}
shell_64(this, content) {
  FileAppend, % content, % this.name, UTF-8
  return content
}
shell_65() {
  ExitApp
}
shell_66() {
  return new EmitterShellX
}
shell_67(this, key, callback) {
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  $.push.Call(this.bus, [__type__, __name__, callback])
  return this
}
shell_68(this, key) {
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  if !(__type__) {
    this.bus := []
    return this
  }
  if !(__name__) {
    __busNew__ := []
    for __index_for__, __item__ in this.bus {
      if (__item__[1] == __type__) {
        continue
      }
      $.push.Call(__busNew__, __item__)
    }
    this.bus := __busNew__
    return this
  }
  __busNew__ := []
  for __index_for__, __item__ in this.bus {
    if (__item__[1] == __type__ && __item__[2] == __name__) {
      continue
    }
    $.push.Call(__busNew__, __item__)
  }
  this.bus := __busNew__
  return this
}
shell_69(this, key, args*) {
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  if !(__type__) {
    return this
  }
  if !(__name__) {
    for __index_for__, __item__ in this.bus {
      if !(__item__[1] == __type__) {
        continue
      }
      __item__[3].Call(args*)
    }
    return this
  }
  for __index_for__, __item__ in this.bus {
    if !(__item__[1] == __type__ && __item__[2] == __name__) {
      continue
    }
    __item__[3].Call(args*)
  }
  return this
}
shell_70(list, n := 1) {
  if !($.isArray.Call(list)) {
    throw Exception("$.drop: invalid type")
  }
  __listNew__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if !(__i__ >= n) {
      continue
    }
    $.push.Call(__listNew__, __item__)
  }
  return __listNew__
}
shell_71(callback, args) {
  callback.Call(args*)
}
shell_72(callback, time, args*) {
  if !($.isFunction.Call(callback)) {
    throw Exception("$.delay: invalid type")
  }
  if !($.isNumber.Call(time)) {
    throw Exception("$.delay: invalid type")
  }
  __timer__ := $.setTimeout.Call(Func("shell_71").Bind(callback, args), time)
  return __timer__
}
shell_73(callback, args) {
  callback.Call(args*)
}
shell_74(callback, args*) {
  if !($.isFunction.Call(callback)) {
    throw Exception("$.defer: invalid type")
  }
  return $.delay.Call(Func("shell_73").Bind(callback, args), 1)
}
shell_75(callback, time, index) {
  $.clearTimeout.Call(__tDebounce__[__ci_shell__.Call(index)])
  __tDebounce__[__ci_shell__.Call(index)] := $.setTimeout.Call(callback, time)
}
shell_76(time, callback) {
  __iDebounce__++
  return Func("shell_75").Bind(callback, time, __iDebounce__)
}
shell_77(list, args*) {
  if !($.isArray.Call(list)) {
    throw Exception("$.concat: invalid type")
  }
  __listNew__ := $.clone.Call(list)
  for __index_for__, __arg__ in args {
    __type__ := $.type.Call(__arg__)
    if (__type__ == "array") {
      for __index_for__, __item__ in __arg__ {
        $.push.Call(__listNew__, __item__)
      }
    } else {
      $.push.Call(__listNew__, __arg__)
    }
  }
  return __listNew__
}
shell_78(list) {
  if !($.isArray.Call(list)) {
    throw Exception("$.compact: invalid type")
  }
  __listNew__ := []
  for __index_for__, __item__ in list {
    if !(__item__) {
      continue
    }
    $.push.Call(__listNew__, __item__)
  }
  return __listNew__
}
shell_79(input) {
  __type__ := $.type.Call(input)
  if (__type__ == "array") {
    __listNew__ := []
    for __index_for__, __item__ in input {
      $.push.Call(__listNew__, __item__)
    }
    return __listNew__
  }
  if (__type__ == "object") {
    __mapNew__ := {}
    for __key__, __value__ in input {
      __mapNew__[__ci_shell__.Call(__key__)] := __value__
    }
    return __mapNew__
  }
  throw Exception("$.clone: invalid type '" . (__type__) . "'")
}
shell_80(key := "left") {
  key := $.replace.Call(key, "-", "")
  key := $.replace.Call(key, ":", " ")
  Click, % key
}
shell_81(callback) {
  if !(callback) {
    return
  }
  SetTimer, % callback, Delete
}
shell_82(callback) {
  if !(callback) {
    return
  }
  SetTimer, % callback, Delete
}
shell_83(list, n := 1) {
  if !($.isArray.Call(list)) {
    throw Exception("$.chunk: invalid type")
  }
  __listNew__ := []
  __i__ := 0
  while (__i__ < ($.length.Call(list)) / n) {
    __listTemp__ := []
    __j__ := 0
    while (__j__ < n) {
      $.push.Call(__listTemp__, list[__ci_shell__.Call(__i__ * n + __j__)])
      __j__++
    }
    $.push.Call(__listNew__, __listTemp__)
    __i__++
  }
  return __listNew__
}
shell_84(n) {
  return Ceil(n)
}
shell_85(block) {
  if (block) {
    BlockInput, On
    return
  }
  BlockInput, Off
}
shell_86(callback, args*) {
  if !($.isFunction.Call(callback)) {
    throw Exception("$.bind: invalid type")
  }
  if !(callback.Name) {
    return callback
  }
  return callback.Bind(args*)
}
shell_87() {
  SoundBeep
}
shell_88(message := "") {
  __msg__ := $.toString.Call(message)
  MsgBox, % __msg__
  return message
}
shell_89(n) {
  return Abs(n)
}
shell_90(input) {
  if input is Number
    return input + 1
  return input
}

$.on.Call("1", Func("script_2"))
script_1() {
  $.alert.Call("hello")
}
script_2() {
  $.defer.Call(Func("script_1"))
}
