; Generated by Coffee-AHK/0.0.40
global __ci_shell__ := Func("shell_207")
global $ := {}
$.abs := Func("shell_206")
$.activate := Func("shell_205")
$.add := Func("shell_204")
$.alert := Func("shell_203")
$.beep := Func("shell_201")
$.bind := Func("shell_200")
$.blockInput := Func("shell_199")
$.ceil := Func("shell_198")
$.chunk := Func("shell_197")
$.clearInterval := Func("shell_196")
$.clearTimeout := Func("shell_195")
$.click := Func("shell_194")
$.clone := Func("shell_193")
$.compact := Func("shell_192")
$.concat := Func("shell_190")
$.confirm := Func("shell_189")
global __iDebounce__ := 0
global __tDebounce__ := {}
$.debounce := Func("shell_188")
$.defer := Func("shell_186")
$.delay := Func("shell_184")
$.drop := Func("shell_182")
$.each := Func("shell_180")
class EmitterShellX {
  bus := []
  emit := Func("shell_179").Bind(this)
  off := Func("shell_178").Bind(this)
  on := Func("shell_177").Bind(this)
}
$.emitter := Func("shell_176")
global __eq__ := Func("shell_175")
$.eq := __eq__
$.exit := Func("shell_174")
class FileShellX {
  name := ""
  __New(name) {
    this.name := name
  }
  append := Func("shell_173").Bind(this)
  exist := Func("shell_172").Bind(this)
  delete := Func("shell_171").Bind(this)
  load := Func("shell_170").Bind(this)
  save := Func("shell_169").Bind(this)
}
$.file := Func("shell_168")
$.filter := Func("shell_167")
$.findColor := Func("shell_166")
$.findImage := Func("shell_165")
$.first := Func("shell_164")
$.head := $.first
$.floor := Func("shell_163")
$.formatHotkey := Func("shell_162")
global __formatKeyFormatHotkey__ := Func("shell_161")
global __pickPrefixFormatHotkey__ := Func("shell_160")
$.get := Func("shell_159")
$.getColor := Func("shell_158")
$.getPosition := Func("shell_157")
$.getState := Func("shell_156")
$.gt := Func("shell_155")
$.gte := Func("shell_154")
$.i := Func("shell_153")
$.includes := Func("shell_152")
$.info := Func("shell_151")
$.isActive := Func("shell_150")
$.isArray := Func("shell_149")
$.isExisted := Func("shell_148")
$.isFunction := Func("shell_147")
$.isNumber := Func("shell_146")
$.isObject := Func("shell_145")
$.isString := Func("shell_144")
$.join := Func("shell_143")
class KeyBindingShellX {
  mapBound := {}
  mapCallback := {}
  add := Func("shell_142").Bind(this)
  fire := Func("shell_141").Bind(this)
  init := Func("shell_140").Bind(this)
  off := Func("shell_138").Bind(this)
  on := Func("shell_137").Bind(this)
  remove := Func("shell_136").Bind(this)
}
global keyBindingShell := new KeyBindingShellX()
$.off := keyBindingShell.remove
$.on := keyBindingShell.add
$.trigger := keyBindingShell.fire
$.keys := Func("shell_135")
$.last := Func("shell_134")
$.length := Func("shell_133")
$.lt := Func("shell_132")
$.lte := Func("shell_131")
$.map := Func("shell_130")
$.mixin := Func("shell_129")
$.mod := Func("shell_128")
$.move := Func("shell_127")
$.noop := Func("shell_126")
$.now := Func("shell_125")
$.nth := Func("shell_124")
global __cacheOnce__ := {}
global __indexOnce__ := 0
$.once := Func("shell_123")
$.open := Func("shell_121")
$.play := Func("shell_120")
$.press := Func("shell_119")
global __formatInputPress__ := Func("shell_118")
global __validateInputPress__ := Func("shell_117")
$.push := Func("shell_116")
$.random := Func("shell_115")
$.range := Func("shell_114")
$.reload := Func("shell_113")
$.replace := Func("shell_112")
$.reverse := Func("shell_111")
$.round := Func("shell_110")
$.setFixed := Func("shell_109")
$.setInterval := Func("shell_108")
$.setStyle := Func("shell_107")
$.setTimeout := Func("shell_106")
$.shuffle := Func("shell_105").Bind(__split__)
$.sleep := Func("shell_104")
$.slice := Func("shell_103")
global __pickArgumentSlice__ := Func("shell_102")
$.sort := Func("shell_101")
$.split := Func("shell_100")
$.sum := Func("shell_99")
$.suspend := Func("shell_98")
$.tail := Func("shell_97")
$.take := Func("shell_96")
global __iThrottle__ := 0
global __tThrottle__ := {}
global __tsThrottle__ := {}
$.throttle := Func("shell_95")
$.toLowerCase := Func("shell_92")
$.toLower := $.toLowerCase
$.toString := Func("shell_91")
$.toUpperCase := Func("shell_90")
$.toUpper := $.toUpperCase
$.trim := Func("shell_89")
$.trimEnd := Func("shell_88")
$.trimStart := Func("shell_87")
$.type := Func("shell_86")
$.uniq := Func("shell_85")
$.values := Func("shell_84")
$.VERSION := "0.0.14"
$.wait := Func("shell_83")
(Func("shell_82")).Call()
(Func("shell_81")).Call()
(Func("shell_80")).Call()
(Func("shell_79")).Call()
(Func("shell_78")).Call()
(Func("shell_77")).Call()
(Func("shell_76")).Call()
(Func("shell_75")).Call()
(Func("shell_74")).Call()
(Func("shell_72")).Call()
(Func("shell_71")).Call()
(Func("shell_70")).Call()
(Func("shell_69")).Call()
(Func("shell_68")).Call()
(Func("shell_67")).Call()
(Func("shell_66")).Call()
(Func("shell_65")).Call()
(Func("shell_64")).Call()
(Func("shell_63")).Call()
(Func("shell_62")).Call()
(Func("shell_61")).Call()
(Func("shell_60")).Call()
(Func("shell_58")).Call()
(Func("shell_57")).Call()
(Func("shell_56")).Call()
(Func("shell_55")).Call()
(Func("shell_54")).Call()
(Func("shell_53")).Call()
(Func("shell_51")).Call()
(Func("shell_50")).Call()
(Func("shell_49")).Call()
(Func("shell_48")).Call()
(Func("shell_47")).Call()
(Func("shell_46")).Call()
(Func("shell_45")).Call()
(Func("shell_44")).Call()
(Func("shell_43")).Call()
(Func("shell_42")).Call()
(Func("shell_41")).Call()
(Func("shell_40")).Call()
(Func("shell_39")).Call()
(Func("shell_38")).Call()
(Func("shell_37")).Call()
(Func("shell_36")).Call()
(Func("shell_35")).Call()
(Func("shell_34")).Call()
(Func("shell_33")).Call()
(Func("shell_32")).Call()
(Func("shell_31")).Call()
(Func("shell_30")).Call()
(Func("shell_29")).Call()
(Func("shell_27")).Call()
(Func("shell_26")).Call()
(Func("shell_25")).Call()
(Func("shell_24")).Call()
(Func("shell_23")).Call()
(Func("shell_22")).Call()
(Func("shell_21")).Call()
(Func("shell_20")).Call()
(Func("shell_19")).Call()
(Func("shell_18")).Call()
(Func("shell_17")).Call()
(Func("shell_16")).Call()
(Func("shell_14")).Call()
(Func("shell_13")).Call()
(Func("shell_12")).Call()
(Func("shell_11")).Call()
(Func("shell_10")).Call()
(Func("shell_9")).Call()
(Func("shell_8")).Call()
(Func("shell_6")).Call()
(Func("shell_5")).Call()
(Func("shell_4")).Call()
(Func("shell_3")).Call()
(Func("shell_2")).Call()
(Func("shell_1")).Call()
shell_1() {
  if !(($.type.Call($.wait)) == "function") {
    throw 0
  }
}
shell_2() {
  if !(($.type.Call($.setStyle)) == "function") {
    throw 0
  }
}
shell_3() {
  list := [0]
  $.push.Call(list, 1)
  if !(list[2] == 1) {
    throw 0
  }
  $.push.Call(list, 2, 3, 4)
  if !(list[3] == 2) {
    throw 1
  }
  if !(list[5] == 4) {
    throw 4
  }
}
shell_4() {
  if !(($.type.Call($.press)) == "function") {
    throw 0
  }
}
shell_5() {
  if !(($.type.Call($.play)) == "function") {
    throw 0
  }
}
shell_6() {
  if !(($.type.Call($.open)) == "function") {
    throw 0
  }
}
shell_7(map) {
  map.n += 1
}
shell_8() {
  map := {n: 0}
  add := $.once.Call(Func("shell_7").Bind(map))
  add.Call()
  if !(map.n == 1) {
    throw 0
  }
  add.Call()
  if !(map.n == 1) {
    throw 1
  }
}
shell_9() {
  list := [0, 1, 2, 3]
  n := $.nth.Call(list, 0)
  if !(n == 0) {
    throw n
  }
  n := $.nth.Call(list, 1)
  if !(n == 1) {
    throw n
  }
  n := $.nth.Call(list, -1)
  if !(n == 3) {
    throw n
  }
}
shell_10() {
  now := $.now.Call()
  if !(($.type.Call(now)) == "number") {
    throw 0
  }
}
shell_11() {
  if !(($.type.Call($.noop)) == "function") {
    throw 0
  }
}
shell_12() {
  $.move.Call([100, 100])
  __array__ := $.getPosition.Call()
  x := __array__[1]
  y := __array__[2]
  if !(x == 100 && y == 100) {
    throw 0
  }
}
shell_13() {
  n := $.mod.Call(5, 2)
  if !(n == 1) {
    throw n
  }
  n := $.mod.Call(7, 5)
  if !(n == 2) {
    throw n
  }
}
shell_14() {
  mapA := {a: 1}
  mapB := {b: 2}
  mapC := {c: 3}
  $.mixin.Call(mapA, mapB, mapC)
  result := $.join.Call($.keys.Call(mapA))
  if !(result == "a,b,c") {
    throw 1
  }
  result := $.join.Call($.values.Call(mapA))
  if !(result == "1,2,3") {
    throw 2
  }
}
shell_15(n) {
  return n + 1
}
shell_16() {
  list := [1, 2, 3]
  result := $.join.Call($.map.Call(list, Func("shell_15")))
  if !(result == "2,3,4") {
    throw 0
  }
}
shell_17() {
  result := $.lte.Call(1, 2)
  if !(result) {
    throw 0
  }
  result := $.lte.Call(2, 1)
  if (result) {
    throw 1
  }
  result := $.lte.Call(1, 1)
  if !(result) {
    throw 2
  }
}
shell_18() {
  result := $.lt.Call(1, 2)
  if !(result) {
    throw 0
  }
  result := $.lt.Call(2, 1)
  if (result) {
    throw 1
  }
  result := $.lt.Call(1, 1)
  if (result) {
    throw 2
  }
}
shell_19() {
  string := "wow"
  n := $.length.Call(string)
  if !(n == 3) {
    throw 3
  }
}
shell_20() {
  map := {a: 1, b: 2, c: 3}
  n := $.length.Call(map)
  if !(n == 3) {
    throw 2
  }
}
shell_21() {
  list := [1, 2, 3]
  n := $.length.Call(list)
  if !(n == 3) {
    throw 1
  }
}
shell_22() {
  list := [1, 2, 3]
  item := $.last.Call(list)
  if !(item == 3) {
    throw 0
  }
}
shell_23() {
  map := {a: 1, b: 2, c: 3}
  result := $.join.Call($.keys.Call(map))
  if !(result := "a,b,c") {
    throw 0
  }
}
shell_24() {
  list := [1, 2, 3, 4, 5]
  result := $.join.Call(list)
  if !(result == "1,2,3,4,5") {
    throw 1
  }
  result := $.join.Call(list, "")
  if !(result == "12345") {
    throw 2
  }
}
shell_25() {
  string := "aloha"
  result := $.isString.Call(string)
  if !(result) {
    throw 1
  }
}
shell_26() {
  map := {a: 1}
  result := $.isObject.Call(map)
  if !(result) {
    throw 1
  }
}
shell_27() {
  n := 1
  result := $.isNumber.Call(n)
  if !(result) {
    throw 1
  }
}
shell_28() {
  return ""
}
shell_29() {
  fn := Func("shell_28")
  result := $.isFunction.Call(fn)
  if !(result) {
    throw 1
  }
}
shell_30() {
  if !(($.type.Call($.isExisted)) == "function") {
    throw 0
  }
}
shell_31() {
  list := []
  result := $.isArray.Call(list)
  if !(list) {
    throw 1
  }
  list := [1, 2, 3]
  result := $.isArray.Call(list)
  if !(result) {
    throw 2
  }
}
shell_32() {
  if !(($.type.Call($.isActive)) == "function") {
    throw 0
  }
}
shell_33() {
  if !(($.type.Call($.info)) == "function") {
    throw 0
  }
}
shell_34() {
  list := [1, 2, 3]
  result := $.includes.Call(list, 1)
  if !(result) {
    throw 3
  }
  result := $.includes.Call(list, 4)
  if (result) {
    throw 4
  }
}
shell_35() {
  string := "string"
  result := $.includes.Call(string, "s")
  if !(result) {
    throw 1
  }
  result := $.includes.Call(string, "a")
  if (result) {
    throw 2
  }
}
shell_36() {
  if !(($.type.Call($.i)) == "function") {
    throw 0
  }
}
shell_37() {
  result := $.gte.Call(2, 1)
  if !(result) {
    throw 0
  }
  result := $.gte.Call(1, 2)
  if (result) {
    throw 1
  }
  result := $.gte.Call(1, 1)
  if !(result) {
    throw 2
  }
}
shell_38() {
  result := $.gt.Call(2, 1)
  if !(result) {
    throw 0
  }
  result := $.gt.Call(1, 2)
  if (result) {
    throw 1
  }
  result := $.gt.Call(1, 1)
  if (result) {
    throw 2
  }
}
shell_39() {
  if !(($.type.Call($.getState)) == "function") {
    throw 0
  }
}
shell_40() {
  if !(($.type.Call($.getPosition)) == "function") {
    throw 0
  }
  $.move.Call([100, 100])
  __array__ := $.getPosition.Call()
  x := __array__[1]
  y := __array__[2]
  if !(x == 100 && y == 100) {
    throw 0
  }
}
shell_41() {
  if !(($.type.Call($.getColor)) == "function") {
    throw 0
  }
}
shell_42() {
  if !(($.type.Call($.get)) == "function") {
    throw 0
  }
}
shell_43() {
  key := "alt + ctrl + shift + win + esc"
  result := $.formatHotkey.Call(key)
  if !(result == "!^+#esc") {
    throw result
  }
}
shell_44() {
  key := "win + r"
  result := $.formatHotkey.Call(key)
  if !(result == "#r") {
    throw result
  }
}
shell_45() {
  key := "shift + a"
  result := $.formatHotkey.Call(key)
  if !(result == "+a") {
    throw result
  }
}
shell_46() {
  key := "ctrl + f5"
  result := $.formatHotkey.Call(key)
  if !(result == "^f5") {
    throw result
  }
}
shell_47() {
  key := "alt + f4"
  result := $.formatHotkey.Call(key)
  if !(result == "!f4") {
    throw result
  }
}
shell_48() {
  n := 1.2
  result := $.floor.Call(n)
  if !(result == 1) {
    throw result
  }
  n := -1.2
  result := $.floor.Call(n)
  if !(result == -2) {
    throw result
  }
}
shell_49() {
  list := [1, 2, 3]
  n := $.first.Call(list)
  if !(n == 1) {
    throw n
  }
}
shell_50() {
  if !(($.type.Call($.findImage)) == "function") {
    throw 0
  }
}
shell_51() {
  if !(($.type.Call($.findColor)) == "function") {
    throw 0
  }
}
shell_52(it) {
  return it != 2
}
shell_53() {
  list := [1, 2, 3]
  listA := $.filter.Call(list, Func("shell_52"))
  if !(($.join.Call(listA, "")) == "13") {
    throw 0
  }
}
shell_54() {
  if !(($.type.Call($.exit)) == "function") {
    throw 0
  }
}
shell_55() {
  mapA := {a: 1, b: 2}
  mapB := {a: 1, b: 2}
  if !($.eq.Call(mapA, mapB)) {
    throw 0
  }
  mapC := {a: 1, b: 2, c: 3}
  if ($.eq.Call(mapA, mapC)) {
    throw 1
  }
}
shell_56() {
  listA := [1, 2]
  listB := [1, 2]
  if !($.eq.Call(listA, listB)) {
    throw 0
  }
  listC := [1, 2, 3]
  if ($.eq.Call(listA, listC)) {
    throw 1
  }
}
shell_57() {
  stringA := "hello"
  stringB := "hello"
  if !($.eq.Call(stringA, stringB)) {
    throw 0
  }
  stringC := "aloha"
  if ($.eq.Call(stringA, stringC)) {
    throw 1
  }
}
shell_58() {
  a := 1
  b := 1
  if !($.eq.Call(a, b)) {
    throw 0
  }
  c := 2
  if ($.eq.Call(a, c)) {
    throw 1
  }
}
shell_59(listA, length, it, i) {
  listA[__ci_shell__.Call(length - i)] := it
}
shell_60() {
  list := [1, 2, 3, 4]
  listA := []
  length := $.length.Call(list)
  $.each.Call(list, Func("shell_59").Bind(listA, length))
  string := $.join.Call(list)
  if !(string := "4321") {
    throw string
  }
}
shell_61() {
  list := [1, 2, 3, 4, 5]
  listA := $.drop.Call(list)
  result := $.join.Call(listA, "")
  if !(result == "2345") {
    throw result
  }
  listB := $.drop.Call(list, 3)
  result := $.join.Call(listB, "")
  if !(result == "45") {
    throw result
  }
}
shell_62() {
  if !(($.type.Call($.delay)) == "function") {
    throw 0
  }
}
shell_63() {
  if !(($.type.Call($.defer)) == "function") {
    throw 0
  }
}
shell_64() {
  if !(($.type.Call($.debounce)) == "function") {
    throw 0
  }
}
shell_65() {
  if !(($.type.Call($.confirm)) == "function") {
    throw 0
  }
}
shell_66() {
  listA := $.concat.Call([1, 2, 3], 4, 5, [6, 7], 8, [9])
  if !(($.join.Call(listA, "")) == "123456789") {
    throw listA
  }
}
shell_67() {
  list := [0, 1, false, true, "", "x"]
  listA := $.compact.Call(list)
  if !(($.join.Call(listA, "")) == "11x") {
    throw listA
  }
}
shell_68() {
  map := {a: 1, b: 2, c: 3}
  mapA := $.clone.Call(map)
  if !(($.join.Call([mapA.a, mapA.b, mapA.c], "")) == "123") {
    throw mapA
  }
}
shell_69() {
  list := [1, 2, 3]
  listA := $.clone.Call(list)
  if !(($.join.Call(listA, "")) == "123") {
    throw listA
  }
}
shell_70() {
  if !(($.type.Call($.click)) == "function") {
    throw 0
  }
}
shell_71() {
  if !(($.type.Call($.clearTimeout)) == "function") {
    throw 0
  }
}
shell_72() {
  if !(($.type.Call($.clearInterval)) == "function") {
    throw 0
  }
}
shell_73(it) {
  return $.join.Call(it, "")
}
shell_74() {
  list := [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  listA := $.chunk.Call(list, 4)
  string := $.join.Call(($.map.Call(listA, Func("shell_73"))), ",")
  if !(string == "1234,5678,910") {
    throw string
  }
}
shell_75() {
  n := 1.2
  result := $.ceil.Call(n)
  if !(result == 2) {
    throw 0
  }
  n := -1.2
  result := $.ceil.Call(n)
  if !(result == -1) {
    throw 1
  }
}
shell_76() {
  if !(($.type.Call($.blockInput)) == "function") {
    throw 0
  }
}
shell_77() {
  if !(($.type.Call($.bind)) == "function") {
    throw 0
  }
}
shell_78() {
  if !(($.type.Call($.beep)) == "function") {
    throw 0
  }
}
shell_79() {
  if !(($.type.Call($.alert)) == "function") {
    throw 0
  }
}
shell_80() {
  a := 1
  b := 2
  c := 3
  d := -4
  result := $.add.Call(a)
  if !(result == 1) {
    throw result
  }
  result := $.add.Call(a, b, c)
  if !(result == 6) {
    throw result
  }
  result := $.add.Call(a, b, c, d)
  if !(result == 2) {
    throw result
  }
}
shell_81() {
  if !(($.type.Call($.activate)) == "function") {
    throw 0
  }
}
shell_82() {
  n := 42
  result := $.abs.Call(n)
  if !(result == 42) {
    throw result
  }
  n := -42
  result := $.abs.Call(n)
  if !(result == 42) {
    throw result
  }
}
shell_83(process, callback) {
  WinWait, % process
  if !(($.type.Call(callback)) == "function") {
    return
  }
  callback.Call()
}
shell_84(input) {
  __listResult__ := []
  for __index_for__, __key__ in $.keys.Call(input) {
    $.push.Call(__listResult__, input[__ci_shell__.Call(__key__)])
  }
  return __listResult__
}
shell_85(list) {
  __hasString__ := false
  for __index_for__, __item__ in list {
    if (($.type.Call(__item__)) == "string") {
      __hasString__ := true
      break
    }
  }
  __string__ := $.join.Call(list, ",")
  if (__hasString__) {
    Sort, __string__, C U D,
  } else {
    Sort, __string__, N U D,
  }
  return $.split.Call(__string__, ",")
}
shell_86(input) {
  if input is Number
    return "number"
  if (IsFunc(input)) {
    return "function"
  }
  if (IsObject(input)) {
    if (input.Count() == input.Length()) {
      if !(input.Length() >= 0) {
        return "function"
      }
      return "array"
    }
    return "object"
  }
  return "string"
}
shell_87(input, omitting := " `t") {
  return LTrim(input, omitting)
}
shell_88(input, omitting := " `t") {
  return RTrim(input, omitting)
}
shell_89(input, omitting := " `t") {
  return Trim(input, omitting)
}
shell_90(input) {
  StringUpper, __result__, input
  return __result__
}
shell_91(input) {
  __type__ := $.type.Call(input)
  if (__type__ == "array") {
    __result__ := ""
    for __index_for__, key in input {
      __result__ := "" . (__result__) . ", " . ($.toString.Call(key)) . ""
    }
    return "[" . ($.trim.Call(__result__, " ,")) . "]"
  } else if (__type__ == "object") {
    __result__ := ""
    for key, value in input {
      __result__ := "" . (__result__) . ", " . (key) . ": " . ($.toString.Call(value)) . ""
    }
    return "{" . ($.trim.Call(__result__, " ,")) . "}"
  }
  return input
}
shell_92(input) {
  StringLower, __result__, input
  return __result__
}
shell_93(callback, index) {
  callback.Call()
  __tsThrottle__[__ci_shell__.Call(index)] := $.now.Call()
}
shell_94(callback, time, index) {
  $.clearTimeout.Call(__tThrottle__[__ci_shell__.Call(index)])
  __tThrottle__[__ci_shell__.Call(index)] := $.setTimeout.Call(Func("shell_93").Bind(callback, index), __tsThrottle__[__ci_shell__.Call(index)] - $.now.Call() + time)
}
shell_95(time, callback) {
  __iThrottle__++
  __tsThrottle__[__ci_shell__.Call(__iThrottle__)] := 0
  return Func("shell_94").Bind(callback, time, __iThrottle__)
}
shell_96(list, count := 1) {
  __len__ := $.length.Call(list)
  if !(__len__) {
    return []
  }
  if !(count >= 0) {
    return []
  }
  if (count >= __len__) {
    count := __len__
  }
  __listNew__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if (__i__ >= count) {
      break
    }
    $.push.Call(__listNew__, __item__)
  }
  return __listNew__
}
shell_97(list) {
  return $.drop.Call(list, 1)
}
shell_98(isSuspended := "Toggle") {
  if (isSuspended != "Toggle") {
    if (isSuspended) {
      isSuspended := "On"
    } else {
      isSuspended := "Off"
    }
  }
  Suspend, % isSuspended
}
shell_99(list) {
  __result__ := 0
  for __index_for__, __n__ in list {
    __result__ := __result__ + __n__
  }
  return __result__
}
shell_100(input, delimiter) {
  return StrSplit(input, delimiter)
}
shell_101(list) {
  __hasString__ := false
  for __index_for__, __item__ in list {
    if (($.type.Call(__item__)) == "string") {
      __hasString__ := true
      break
    }
  }
  __string__ := $.join.Call(list, ",")
  if (__hasString__) {
    Sort, __string__, C D,
  } else {
    Sort, __string__, N D,
  }
  return $.split.Call(__string__, ",")
}
shell_102(args) {
  switch $.length.Call(args) {
    case 1: {
      __array__ := [args[1], 0, $.length.Call(args[1])]
      __list__ := __array__[1]
      __start__ := __array__[2]
      __end__ := __array__[3]
    }
    case 2: {
      __array__ := [args[1], args[2], $.length.Call(args[1])]
      __list__ := __array__[1]
      __start__ := __array__[2]
      __end__ := __array__[3]
    }
    case 3: {
      __array__ := args
      __list__ := __array__[1]
      __start__ := __array__[2]
      __end__ := __array__[3]
    }
  }
  return [__list__, __start__, __end__]
}
shell_103(args*) {
  __array__ := __pickArgumentSlice__.Call(args)
  __list__ := __array__[1]
  __start__ := __array__[2]
  __end__ := __array__[3]
  __len__ := $.length.Call(__list__)
  if (__start__ > __len__) {
    __start__ := __len__
  }
  if (__start__ < 0) {
    __start__ := __len__ + __start__
  }
  if (__end__ > __len__) {
    __end__ := __len__
  }
  if (__end__ < 0) {
    __end__ := __len__ + __end__
  }
  __isReverse__ := false
  if (__start__ > __end__) {
    __isReverse__ := true
    __array__ := [__end__, __start__]
    __start__ := __array__[1]
    __end__ := __array__[2]
  }
  __listNew__ := []
  __n__ := 0
  __max__ := __end__ - __start__
  while (__n__ < __max__) {
    $.push.Call(__listNew__, __list__[__ci_shell__.Call(__start__ + __n__)])
    __n__++
  }
  if (__isReverse__) {
    return $.reverse.Call(__listNew__)
  }
  return __listNew__
}
shell_104(time) {
  Sleep, % time
}
shell_105(__split__, list) {
  __string__ := $.join.Call(list, ",")
  Sort, __string__, Random D,
  return __split__.Call(__string__, ",")
}
shell_106(callback, time) {
  callback := $.bind.Call(callback)
  if !($.isNumber.Call(time)) {
    throw Exception("$.setTimeout: invalid type")
  }
  if (time <= 0) {
    time := 1
  }
  SetTimer, % callback, % 0 - time
  return callback
}
shell_107(process, style) {
  WinSet, Style, % style, % process
}
shell_108(callback, time) {
  callback := $.bind.Call(callback)
  if !(time > 0) {
    throw Exception("$.setInterval: invalid value")
  }
  SetTimer, % callback, % time
  return callback
}
shell_109(isFixed := "Toggle") {
  if (isFixed != "Toggle") {
    if (isFixed) {
      isFixed := "On"
    } else {
      isFixed := "Off"
    }
  }
  Winset AlwaysOnTop, % isFixed, A
}
shell_110(n) {
  return Round(n)
}
shell_111(list) {
  __len__ := $.length.Call(list)
  __listNew__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    __listNew__[__ci_shell__.Call(__len__ - 1 - __i__)] := __item__
  }
  for __i__, __item__ in __listNew__ {
    __i__ := __i__ - 1
    list[__ci_shell__.Call(__i__)] := __item__
  }
  return list
}
shell_112(input, searchment, replacement, limit := -1) {
  return StrReplace(input, searchment, replacement, limit)
}
shell_113() {
  Reload
}
shell_114(args*) {
  switch $.length.Call(args) {
    case 1: {
      __array__ := [0, args[1], 1]
      __start__ := __array__[1]
      __end__ := __array__[2]
      __step__ := __array__[3]
    }
    case 2: {
      __array__ := [args[1], args[2], 1]
      __start__ := __array__[1]
      __end__ := __array__[2]
      __step__ := __array__[3]
    }
    case 3: {
      __array__ := args
      __start__ := __array__[1]
      __end__ := __array__[2]
      __step__ := __array__[3]
    }
    default: {
      throw Exception("$.range: invalid arguments")
    }
  }
  if (__start__ == __end__) {
    return [__start__]
  }
  if (__start__ > __end__) {
    return []
  }
  __listResult__ := []
  __n__ := 0
  __max__ := __end__ - __start__
  while (__n__ < __max__) {
    $.push.Call(__listResult__, __start__ + __step__ * __n__)
    __n__++
  }
  return __listResult__
}
shell_115(min := 0, max := 1) {
  Random, __result__, min, max
  return __result__
}
shell_116(list, args*) {
  for __index_for__, __arg__ in args {
    list.Push(__arg__)
  }
  return list
}
shell_117(listInput) {
  if !($.length.Call(listInput)) {
    return false
  }
  __key__ := listInput[1]
  if ($.includes.Call(__key__, "-button")) {
    __key__ := $.replace.Call(__key__, "l-button", "left")
    __key__ := $.replace.Call(__key__, "m-button", "middle")
    __key__ := $.replace.Call(__key__, "r-button", "right")
    $.click.Call(__key__)
    return false
  }
  return true
}
shell_118(listInput) {
  __listKey__ := []
  for __index_for__, __input__ in listInput {
    __ipt__ := $.toLowerCase.Call(__input__)
    __ipt__ := $.replace.Call(__ipt__, " ", "")
    __ipt__ := $.replace.Call(__ipt__, "-", "")
    $.push.Call(__listKey__, ($.split.Call(__ipt__, "+"))*)
  }
  return __listKey__
}
shell_119(listInput*) {
  if !(__validateInputPress__.Call(listInput)) {
    return
  }
  __listKey__ := __formatInputPress__.Call(listInput)
  __listResult__ := []
  __len__ := $.length.Call(__listKey__)
  for __i__, __key__ in __listKey__ {
    __i__ := __i__ - 1
    if (__i__ == __len__ - 1) {
      __listResult__[__ci_shell__.Call(__i__)] := $.split.Call(__key__, ":")
      continue
    }
    if ($.includes.Call(__key__, ":")) {
      __listResult__[__ci_shell__.Call(__i__)] := $.split.Call(__key__, ":")
      __listResult__[__ci_shell__.Call((__len__ - 1) * 2 - __i__)] := $.split.Call(__key__, ":")
    } else {
      __listResult__[__ci_shell__.Call(__i__)] := [__key__, "down"]
      __listResult__[__ci_shell__.Call((__len__ - 1) * 2 - __i__)] := [__key__, "up"]
    }
  }
  for __i__, __it__ in __listResult__ {
    __i__ := __i__ - 1
    if (__it__[1] == "win") {
      __it__[1] := "lwin"
    }
    __listResult__[__ci_shell__.Call(__i__)] := $.trim.Call("" . (__it__[1]) . " " . (__it__[2]) . "")
  }
  __result__ := ""
  for __index_for__, __it__ in __listResult__ {
    __result__ := "" . (__result__) . "{" . (__it__) . "}"
  }
  Send, % __result__
}
shell_120(filename) {
  SoundPlay, % filename
}
shell_121(source) {
  Run, % source
}
shell_122(__i__, callback, args*) {
  if (__cacheOnce__[__ci_shell__.Call(__i__)][1]) {
    return __cacheOnce__[__ci_shell__.Call(__i__)][2]
  }
  __result__ := callback.Call(args*)
  __cacheOnce__[__ci_shell__.Call(__i__)] := [true, __result__]
  return __result__
}
shell_123(callback) {
  __i__ := __indexOnce__
  __indexOnce__++
  __cacheOnce__[__ci_shell__.Call(__i__)] := [false, ""]
  return Func("shell_122").Bind(__i__, callback)
}
shell_124(list, n := 0) {
  if (n >= 0) {
    return list[__ci_shell__.Call(n)]
  } else {
    return list[__ci_shell__.Call(($.length.Call(list)) + n)]
  }
}
shell_125() {
  return A_TickCount
}
shell_126() {
  return
}
shell_127(point := "", speed := 0) {
  MouseMove, point[1], point[2], speed
}
shell_128(dividend, divisor) {
  return Mod(dividend, divisor)
}
shell_129(args*) {
  if !($.length.Call(args)) {
    throw Exception("$.mixin: invalid arguments")
  }
  __result__ := args[1]
  for __index_for__, __item__ in $.tail.Call(args) {
    for __key__, __value__ in __item__ {
      __result__[__ci_shell__.Call(__key__)] := __value__
    }
  }
  return __result__
}
shell_130(list, callback) {
  __listResult__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    $.push.Call(__listResult__, callback.Call(__item__, __i__))
  }
  return __listResult__
}
shell_131(value, other) {
  return value <= other
}
shell_132(value, other) {
  return value < other
}
shell_133(input) {
  __type__ := $.type.Call(input)
  switch __type__ {
    case "array": {
      return input.Length()
    }
    case "object": {
      return input.Count()
    }
    case "string": {
      return StrLen(input)
    }
    default: {
      throw Exception("$.length: invalid type '" . (__type__) . "'")
    }
  }
}
shell_134(list) {
  return list[__ci_shell__.Call(($.length.Call(list)) - 1)]
}
shell_135(input) {
  __listResult__ := []
  for __key__, __value__ in input {
    $.push.Call(__listResult__, __key__)
  }
  return $.sort.Call(__listResult__)
}
shell_136(this, key) {
  __array__ := $.split.Call(key, ".")
  key := __array__[1]
  __name__ := __array__[2]
  if !(__name__) {
    this.mapCallback[__ci_shell__.Call(key)] := ""
    this.off.Call(key, this.mapBound[__ci_shell__.Call(key)])
    return $
  }
  __listNew__ := []
  for __index_for__, __item__ in this.mapCallback[__ci_shell__.Call(key)] {
    if (__item__[1] == __name__) {
      continue
    }
    $.push.Call(__listNew__, __item__)
  }
  if !($.length.Call(__listNew__)) {
    this.mapCallback[__ci_shell__.Call(key)] := ""
    this.off.Call(key, this.mapBound[__ci_shell__.Call(key)])
    return $
  }
  this.mapCallback[__ci_shell__.Call(key)] := __listNew__
  return $
}
shell_137(this, key, callback) {
  key := $.formatHotkey.Call($.replace.Call(key, ":down", ""))
  Hotkey, % key, % callback, On
  return $
}
shell_138(this, key, callback) {
  key := $.formatHotkey.Call($.replace.Call(key, ":down", ""))
  Hotkey, % key, % callback, Off
  return $
}
shell_139(key, this) {
  this.fire.Call(key)
}
shell_140(this, key) {
  if (this.mapCallback[__ci_shell__.Call(key)]) {
    return $
  }
  this.mapCallback[__ci_shell__.Call(key)] := []
  __fn__ := Func("shell_139").Bind(key, this)
  this.mapBound[__ci_shell__.Call(key)] := __fn__
  this.on.Call(key, __fn__)
}
shell_141(this, key) {
  __array__ := $.split.Call(($.replace.Call(key, ":down", "")), ".")
  key := __array__[1]
  __name__ := __array__[2]
  if !(__name__) {
    for __index_for__, __item__ in this.mapCallback[__ci_shell__.Call(key)] {
      __item__[2].Call()
    }
    return $
  }
  for __index_for__, __item__ in this.mapCallback[__ci_shell__.Call(key)] {
    if !(__item__[1] == __name__) {
      continue
    }
    __item__[2].Call()
  }
  return $
}
shell_142(this, key, callback) {
  __array__ := $.split.Call(key, ".")
  key := __array__[1]
  __name__ := __array__[2]
  this.init.Call(key)
  $.push.Call(this.mapCallback[__ci_shell__.Call(key)], [__name__, callback])
  return $
}
shell_143(list, seperator := ",") {
  __result__ := ""
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if !(__i__) {
      __result__ := __item__
      continue
    }
    __result__ := "" . (__result__) . "" . (seperator) . "" . (__item__) . ""
  }
  return __result__
}
shell_144(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "string") {
    return false
  }
  return true
}
shell_145(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "object") {
    return false
  }
  return true
}
shell_146(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "number") {
    return false
  }
  return true
}
shell_147(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "function") {
    return false
  }
  return true
}
shell_148(process) {
  return WinExist("ahk_exe " . (process) . "")
}
shell_149(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "array") {
    return false
  }
  return true
}
shell_150(process) {
  return WinActive("ahk_exe " . (process) . "")
}
shell_151(message, point := "") {
  if !(message) {
    return message
  }
  if !(point) {
    point := $.getPosition.Call()
  }
  __msg__ := $.toString.Call(message)
  ToolTip, % __msg__, % point[1], % point[2]
  return message
}
shell_152(input, needle) {
  __type__ := $.type.Call(input)
  if (__type__ == "string" || __type__ == "number") {
    return (InStr(input, needle)) > 0
  }
  if (__type__ == "array") {
    for __index_for__, __it__ in input {
      if (__it__ == needle) {
        return true
      }
    }
    return false
  }
  throw Exception("$.includes: invalid type '" . (__type__) . "'")
}
shell_153(message) {
  $.info.Call("[" . ($.now.Call()) . "] " . ($.toString.Call(message)) . "", [0, 0])
  return message
}
shell_154(value, other) {
  return value >= other
}
shell_155(value, other) {
  return value > other
}
shell_156(key) {
  key := $.formatHotkey.Call(key)
  return GetKeyState(key, "P")
}
shell_157() {
  MouseGetPos, __x__, __y__
  return [__x__, __y__]
}
shell_158(point := "") {
  if !(point) {
    point := $.getPosition.Call()
  }
  PixelGetColor, __result__, % point[1], % point[2], RGB
  return __result__
}
shell_159(url, callback) {
  try {
    whr := ComObjCreate("WinHttp.WinHttpRequest.5.1")
    whr.Open("GET", url, true)
    whr.Send()
    whr.WaitForResponse()
    callback.Call(whr.ResponseText)
  } catch {
    callback.Call("")
  }
}
shell_160(listKey) {
  if (($.length.Call(listKey)) == 1) {
    return ["", listKey]
  }
  __prefix__ := ""
  __listNew__ := []
  for __index_for__, __key__ in listKey {
    if (__key__ == "alt") {
      __prefix__ := "" . (__prefix__) . "!"
      continue
    }
    if (__key__ == "ctrl") {
      __prefix__ := "" . (__prefix__) . "^"
      continue
    }
    if (__key__ == "shift") {
      __prefix__ := "" . (__prefix__) . "+"
      continue
    }
    if (__key__ == "win") {
      __prefix__ := "" . (__prefix__) . "#"
      continue
    }
    $.push.Call(__listNew__, __key__)
  }
  return [__prefix__, __listNew__]
}
shell_161(key) {
  __listKey__ := []
  __key__ := $.toLowerCase.Call(key)
  __key__ := $.replace.Call(__key__, " ", "")
  __key__ := $.replace.Call(__key__, "-", "")
  $.push.Call(__listKey__, ($.split.Call(__key__, "+"))*)
  return __listKey__
}
shell_162(key) {
  __listKey__ := __formatKeyFormatHotkey__.Call(key)
  __array__ := __pickPrefixFormatHotkey__.Call(__listKey__)
  __prefix__ := __array__[1]
  __listKey__ := __array__[2]
  __result__ := ""
  for __index_for__, __it__ in __listKey__ {
    __result__ := "" . (__result__) . " & " . (__it__) . ""
  }
  return $.replace.Call("" . (__prefix__) . "" . ($.trim.Call(__result__, " &")) . "", ":", " ")
}
shell_163(n) {
  return Floor(n)
}
shell_164(list) {
  return list[1]
}
shell_165(source, start := "", end := "") {
  if !(start) {
    start := [0, 0]
  }
  if !(end) {
    end := [A_ScreenWidth, A_ScreenHeight]
  }
  ImageSearch __x__, __y__, start[1], start[2], end[1], end[2], % A_ScriptDir . "\\\" . source
  return [__x__, __y__]
}
shell_166(color, start := "", end := "", variation := 0) {
  if !(start) {
    start := [0, 0]
  }
  if !(end) {
    end := [A_ScreenWidth, A_ScreenHeight]
  }
  PixelSearch __x__, __y__, start[1], start[2], end[1], end[2], color, variation, Fast RGB
  return [__x__, __y__]
}
shell_167(list, callback) {
  __listResult__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if !(callback.Call(__item__, __i__)) {
      continue
    }
    $.push.Call(__listResult__, __item__)
  }
  return __listResult__
}
shell_168(name) {
  return new FileShellX(name)
}
shell_169(this, content) {
  this.delete.Call()
  return this.append.Call(content)
}
shell_170(this) {
  if !(this.exist.Call()) {
    return ""
  }
  FileRead, __result__, % this.name
  return $.replace.Call(__result__, "`r", "")
}
shell_171(this) {
  if !(this.exist.Call()) {
    return this
  }
  FileDelete, % this.name
  return this
}
shell_172(this) {
  if !(FileExist(this.name)) {
    return false
  }
  return true
}
shell_173(this, content) {
  FileAppend, % content, % this.name, UTF-8
  return content
}
shell_174() {
  ExitApp
}
shell_175(value, other) {
  __typeA__ := $.type.Call(value)
  __typeB__ := $.type.Call(other)
  if !(__typeA__ == __typeB__) {
    return false
  }
  if ($.includes.Call(["function", "number", "string"], __typeA__)) {
    return value == other
  }
  __lengthA__ := $.length.Call(value)
  __lengthB__ := $.length.Call(other)
  if !(__lengthA__ == __lengthB__) {
    return false
  }
  if (__typeA__ == "array") {
    for __i__, __it__ in value {
      __i__ := __i__ - 1
      if !(__eq__.Call(__it__, other[__ci_shell__.Call(__i__)])) {
        return false
      }
    }
    return true
  }
  for __k__, __v__ in value {
    if !(__eq__.Call(__v__, other[__ci_shell__.Call(__k__)])) {
      return false
    }
  }
  return true
}
shell_176() {
  return new EmitterShellX
}
shell_177(this, key, callback) {
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  $.push.Call(this.bus, [__type__, __name__, callback])
  return this
}
shell_178(this, key) {
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  if !(__type__) {
    this.bus := []
    return this
  }
  if !(__name__) {
    __busNew__ := []
    for __index_for__, __item__ in this.bus {
      if (__item__[1] == __type__) {
        continue
      }
      $.push.Call(__busNew__, __item__)
    }
    this.bus := __busNew__
    return this
  }
  __busNew__ := []
  for __index_for__, __item__ in this.bus {
    if (__item__[1] == __type__ && __item__[2] == __name__) {
      continue
    }
    $.push.Call(__busNew__, __item__)
  }
  this.bus := __busNew__
  return this
}
shell_179(this, key, args*) {
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  if !(__type__) {
    return this
  }
  if !(__name__) {
    for __index_for__, __item__ in this.bus {
      if !(__item__[1] == __type__) {
        continue
      }
      __item__[3].Call(args*)
    }
    return this
  }
  for __index_for__, __item__ in this.bus {
    if !(__item__[1] == __type__ && __item__[2] == __name__) {
      continue
    }
    __item__[3].Call(args*)
  }
  return this
}
shell_180(list, callback) {
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    callback.Call(__item__, __i__)
  }
}
shell_181(n, _it, i) {
  return i >= n
}
shell_182(list, n := 1) {
  return $.filter.Call(list, Func("shell_181").Bind(n))
}
shell_183(callback, args) {
  callback.Call(args*)
}
shell_184(callback, time, args*) {
  __timer__ := $.setTimeout.Call(Func("shell_183").Bind(callback, args), time)
  return __timer__
}
shell_185(callback, args) {
  callback.Call(args*)
}
shell_186(callback, args*) {
  return $.delay.Call(Func("shell_185").Bind(callback, args), 1)
}
shell_187(callback, time, index) {
  $.clearTimeout.Call(__tDebounce__[__ci_shell__.Call(index)])
  __tDebounce__[__ci_shell__.Call(index)] := $.setTimeout.Call(callback, time)
}
shell_188(time, callback) {
  __iDebounce__++
  return Func("shell_187").Bind(callback, time, __iDebounce__)
}
shell_189(text, callback) {
  
  MsgBox, 0x4,, % text`
  IfMsgBox Yes
    callback.Call(true)
  else
    callback.Call(false)
  
}
shell_190(list, args*) {
  __listNew__ := $.clone.Call(list)
  for __index_for__, __arg__ in args {
    __type__ := $.type.Call(__arg__)
    if (__type__ == "array") {
      for __index_for__, __item__ in __arg__ {
        $.push.Call(__listNew__, __item__)
      }
    } else {
      $.push.Call(__listNew__, __arg__)
    }
  }
  return __listNew__
}
shell_191(it) {
  return it
}
shell_192(list) {
  return $.filter.Call(list, Func("shell_191"))
}
shell_193(input) {
  __type__ := $.type.Call(input)
  if (__type__ == "array") {
    return $.slice.Call(input)
  }
  if (__type__ == "object") {
    __mapNew__ := {}
    for __key__, __value__ in input {
      __mapNew__[__ci_shell__.Call(__key__)] := __value__
    }
    return __mapNew__
  }
  throw Exception("$.clone: invalid type '" . (__type__) . "'")
}
shell_194(key := "left") {
  key := $.replace.Call(key, "-", "")
  key := $.replace.Call(key, ":", " ")
  Click, % key
}
shell_195(callback) {
  if !(callback) {
    return
  }
  SetTimer, % callback, Delete
}
shell_196(callback) {
  if !(callback) {
    return
  }
  SetTimer, % callback, Delete
}
shell_197(list, n := 1) {
  __listNew__ := []
  __length__ := $.length.Call(list)
  __i__ := 0
  while (__i__ < __length__ / n) {
    __listTemp__ := []
    __j__ := 0
    while (__j__ < n) {
      __index__ := __i__ * n + __j__
      if !(__index__ < __length__) {
        break
      }
      $.push.Call(__listTemp__, list[__ci_shell__.Call(__index__)])
      __j__++
    }
    $.push.Call(__listNew__, __listTemp__)
    __i__++
  }
  return __listNew__
}
shell_198(n) {
  return Ceil(n)
}
shell_199(block) {
  if (block) {
    BlockInput, On
    return
  }
  BlockInput, Off
}
shell_200(callback, args*) {
  if !(callback.Name) {
    if !($.length.Call(args)) {
      return callback
    }
    throw Exception("$.bind: cannot bind a bound function")
  }
  return callback.Bind(args*)
}
shell_201() {
  SoundBeep
}
shell_202(msg) {
  return $.toString.Call(msg)
}
shell_203(message*) {
  __msg__ := $.join.Call(($.map.Call(message, Func("shell_202"))), ", ")
  MsgBox, % __msg__
}
shell_204(args*) {
  __result__ := 0
  for __index_for__, __arg__ in args {
    __result__ := __result__ + __arg__
  }
  return __result__
}
shell_205(process) {
  WinActivate, % process
}
shell_206(n) {
  return Abs(n)
}
shell_207(input) {
  if input is Number
    return input + 1
  return input
}
