; Generated by Coffee-AHK/0.0.52
global __rf_shell__ := Func("shell_34")
global __ci_shell__ := Func("shell_33")

#KeyHistory, 0
#MaxThreads, 20
#NoEnv
#Persistent
#SingleInstance, Force
#UseHook, On

CoordMode, Mouse, Client
CoordMode, Pixel, Client
CoordMode, ToolTip, Client
SendMode, Event
SetBatchLines, 100ms
SetKeyDelay, 0, 50
SetMouseDelay, 0, 50
StringCaseSense, On

global __shell_module_1__ := (Func("shell_32")).Call()
global __shell_module_4__ := (Func("shell_30")).Call()
global __shell_module_6__ := (Func("shell_28")).Call()
global __shell_module_14__ := (Func("shell_26")).Call()
global __shell_module_7__ := (Func("shell_24")).Call()
global __shell_module_8__ := (Func("shell_22")).Call()
global __shell_module_9__ := (Func("shell_20")).Call()
global __shell_module_12__ := (Func("shell_18")).Call()
global __shell_module_13__ := (Func("shell_16")).Call()
global __shell_module_2__ := (Func("shell_15")).Call()
global __shell_module_10__ := (Func("shell_13")).Call()
global __shell_module_3__ := (Func("shell_10")).Call()
global __shell_module_11__ := (Func("shell_8")).Call()
global __each__ := __shell_module_1__
global __length__ := __shell_module_2__
global __join__ := __shell_module_3__
(Func("shell_6")).Call()
global __shell_module_5__ := (Func("shell_4")).Call()
global __exit__ := __shell_module_4__
global __setTimeout__ := __shell_module_5__
(Func("shell_2")).Call()
shell_1() {
  return __rf_shell__.Call(__exit__, "#rf/shell/1").Call()
}
shell_2() {
  return __rf_shell__.Call(__setTimeout__, "#rf/shell/2").Call(Func("shell_1"), 1000)
}
shell_3(__bind__, __isNumber__, callback, time) {
  callback := __rf_shell__.Call(__bind__, "#rf/shell/3").Call(callback)
  if !(__rf_shell__.Call(__isNumber__, "#rf/shell/4").Call(time)) {
    throw "$.setTimeout: invalid type"
  }
  if (time < 1) {
    time := 1
  }
  SetTimer, % callback, % 0 - time
  return callback
}
shell_4() {
  __bind__ := __shell_module_11__
  __isNumber__ := __shell_module_12__
  return Func("shell_3").Bind(__bind__, __isNumber__)
}
shell_5(listA, length, it, i) {
  return listA[__ci_shell__.Call(length - i)] := it
}
shell_6() {
  list := [1, 2, 3, 4]
  listA := []
  length := __rf_shell__.Call(__length__, "#rf/shell/5").Call(list)
  __rf_shell__.Call(__each__, "#rf/shell/6").Call(list, Func("shell_5").Bind(listA, length))
  string := __rf_shell__.Call(__join__, "#rf/shell/7").Call(list)
  if !(string := "4321") {
    throw string
  }
}
shell_7(callback, args*) {
  if !(callback.Name) {
    if !(__rf_shell__.Call(__length__, "#rf/shell/8").Call(args)) {
      return callback
    }
    throw "$.bind: cannot bind a bound function"
  }
  return callback.Bind(args*)
}
shell_8() {
  __length__ := __shell_module_2__
  return Func("shell_7")
}
shell_9(__toString__, list, seperator := ",") {
  __result__ := ""
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if !(__i__) {
      __result__ := __rf_shell__.Call(__toString__, "#rf/shell/9").Call(__item__)
      continue
    }
    __result__ := "" . (__result__) . "" . (seperator) . "" . (__item__) . ""
  }
  return __result__
}
shell_10() {
  __toString__ := __shell_module_10__
  return Func("shell_9").Bind(__toString__)
}
shell_11(__toString__, it) {
  return __result__ := "" . (__result__) . ", " . (__rf_shell__.Call(__toString__, "#rf/shell/10").Call(it)) . ""
}
shell_12(__isString__, __isNumber__, __isArray__, __forEach__, __toString__, __trim__, __isObject__, __getType__, ipt) {
  if (__rf_shell__.Call(__isString__, "#rf/shell/11").Call(ipt)) {
    return ipt
  }
  if (__rf_shell__.Call(__isNumber__, "#rf/shell/12").Call(ipt)) {
    return "" . (ipt) . ""
  }
  if (__rf_shell__.Call(__isArray__, "#rf/shell/13").Call(ipt)) {
    __result__ := ""
    __rf_shell__.Call(__forEach__, "#rf/shell/14").Call(ipt, Func("shell_11").Bind(__toString__))
    return "[" . (__rf_shell__.Call(__trim__, "#rf/shell/15").Call(__result__, " ,")) . "]"
  }
  if (__rf_shell__.Call(__isObject__, "#rf/shell/16").Call(ipt)) {
    __result__ := ""
    for key, value in ipt {
      __result__ := "" . (__result__) . ", " . (key) . ": " . (__rf_shell__.Call(__toString__, "#rf/shell/17").Call(value)) . ""
    }
    return "{" . (__rf_shell__.Call(__trim__, "#rf/shell/18").Call(__result__, " ,")) . "}"
  }
  throw "__toString__: invalid type '" . (__rf_shell__.Call(__getType__, "#rf/shell/19").Call(ipt)) . "'"
}
shell_13() {
  __forEach__ := __shell_module_13__
  __getType__ := __shell_module_6__
  __isArray__ := __shell_module_7__
  __isNumber__ := __shell_module_12__
  __isObject__ := __shell_module_8__
  __isString__ := __shell_module_9__
  __trim__ := __shell_module_14__
  __toString__ := Func("shell_12").Bind(__isString__, __isNumber__, __isArray__, __forEach__, __toString__, __trim__, __isObject__, __getType__)
  return __toString__
}
shell_14(__isArray__, __isObject__, __isString__, __getType__, ipt) {
  if (__rf_shell__.Call(__isArray__, "#rf/shell/20").Call(ipt)) {
    return ipt.Length()
  }
  if (__rf_shell__.Call(__isObject__, "#rf/shell/21").Call(ipt)) {
    return ipt.Count()
  }
  if (__rf_shell__.Call(__isString__, "#rf/shell/22").Call(ipt)) {
    return StrLen(ipt)
  }
  throw "$.length: invalid type '" . (__rf_shell__.Call(__getType__, "#rf/shell/23").Call(ipt)) . "'"
}
shell_15() {
  __getType__ := __shell_module_6__
  __isArray__ := __shell_module_7__
  __isObject__ := __shell_module_8__
  __isString__ := __shell_module_9__
  return Func("shell_14").Bind(__isArray__, __isObject__, __isString__, __getType__)
}
shell_16() {
  __each__ := __shell_module_1__
  return __each__
}
shell_17(__getType__, ipt) {
  __type__ := __rf_shell__.Call(__getType__, "#rf/shell/24").Call(ipt)
  if !(__type__ == "number") {
    return false
  }
  return true
}
shell_18() {
  __getType__ := __shell_module_6__
  return Func("shell_17").Bind(__getType__)
}
shell_19(__getType__, ipt) {
  __type__ := __rf_shell__.Call(__getType__, "#rf/shell/25").Call(ipt)
  if !(__type__ == "string") {
    return false
  }
  return true
}
shell_20() {
  __getType__ := __shell_module_6__
  return Func("shell_19").Bind(__getType__)
}
shell_21(__getType__, ipt) {
  __type__ := __rf_shell__.Call(__getType__, "#rf/shell/26").Call(ipt)
  if !(__type__ == "object") {
    return false
  }
  return true
}
shell_22() {
  __getType__ := __shell_module_6__
  return Func("shell_21").Bind(__getType__)
}
shell_23(__getType__, ipt) {
  __type__ := __rf_shell__.Call(__getType__, "#rf/shell/27").Call(ipt)
  if !(__type__ == "array") {
    return false
  }
  return true
}
shell_24() {
  __getType__ := __shell_module_6__
  return Func("shell_23").Bind(__getType__)
}
shell_25(ipt, omitting := " `t") {
  return Trim(ipt, omitting)
}
shell_26() {
  return Func("shell_25")
}
shell_27(ipt) {
  if ipt is Number
    return "number"
  if (IsFunc(ipt)) {
    return "function"
  }
  if (IsObject(ipt)) {
    if (ipt.Count() == ipt.Length()) {
      if !(ipt.Length() >= 0) {
        return "function"
      }
      return "array"
    }
    return "object"
  }
  return "string"
}
shell_28() {
  return Func("shell_27")
}
shell_29() {
  ExitApp
  return
}
shell_30() {
  return Func("shell_29")
}
shell_31(list, callback) {
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    __rf_shell__.Call(callback, "#rf/shell/28").Call(__item__, __i__)
  }
  return
}
shell_32() {
  return Func("shell_31")
}
shell_33(__ipt__) {
  if __ipt__ is Number
    return __ipt__ + 1
  return __ipt__
}
shell_34(__fn__, __token__) {
  if (__fn__) {
    return __fn__
  }
  throw Exception("invalid function: " . (__token__) . "")
}
