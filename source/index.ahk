; Generated by Coffee-AHK/0.0.48
global __ci_shell__ := Func("shell_44")
global __shell_module_1__ := (Func("shell_43")).Call()
global __shell_module_2__ := (Func("shell_41")).Call()
global __shell_module_4__ := (Func("shell_39")).Call()
global __shell_module_5__ := (Func("shell_37")).Call()
global __shell_module_7__ := (Func("shell_35")).Call()
global __shell_module_8__ := (Func("shell_33")).Call()
global __shell_module_10__ := (Func("shell_31")).Call()
global __shell_module_11__ := (Func("shell_29")).Call()
global __shell_module_14__ := (Func("shell_27")).Call()
global __shell_module_17__ := (Func("shell_25")).Call()
global __shell_module_19__ := (Func("shell_23")).Call()
global __shell_module_3__ := (Func("shell_21")).Call()
global __shell_module_12__ := (Func("shell_19")).Call()
global __shell_module_15__ := (Func("shell_17")).Call()
global __shell_module_16__ := (Func("shell_15")).Call()
global __shell_module_6__ := (Func("shell_13")).Call()
global __shell_module_9__ := (Func("shell_11")).Call()
global __shell_module_21__ := (Func("shell_9")).Call()
global __shell_module_20__ := (Func("shell_7")).Call()
global __shell_module_18__ := (Func("shell_4")).Call()
global __shell_module_13__ := (Func("shell_2")).Call()
global __abs__ := __shell_module_1__
global __add__ := __shell_module_2__
global __admin__ := __shell_module_3__
global __alert__ := __shell_module_4__
global __beep__ := __shell_module_5__
global __bind__ := __shell_module_6__
global __blockInput__ := __shell_module_7__
global __ceil__ := __shell_module_8__
global __chunk__ := __shell_module_9__
global __clearInterval__ := __shell_module_10__
global __clearTimeout__ := __shell_module_11__
global __click__ := __shell_module_12__
global __mixin__ := __shell_module_13__
global $ := {}
__mixin__.Call($, {abs: __abs__})
__mixin__.Call($, {add: __add__})
__mixin__.Call($, {admin: __admin__})
__mixin__.Call($, {alert: __alert__})
__mixin__.Call($, {beep: __beep__})
__mixin__.Call($, {bind: __bind__})
__mixin__.Call($, {blockInput: __blockInput__})
__mixin__.Call($, {ceil: __ceil__})
__mixin__.Call($, {chunk: __chunk__})
__mixin__.Call($, {clearInterval: __clearInterval__})
__mixin__.Call($, {clearTimeout: __clearTimeout__})
__mixin__.Call($, {click: __click__})
$ := $
shell_1(__length__, __tail__, args*) {
  if !(__length__.Call(args)) {
    throw Exception("$.mixin: invalid arguments")
  }
  __result__ := args[1]
  for __index_for__, __item__ in __tail__.Call(args) {
    for __key__, __value__ in __item__ {
      __result__[__ci_shell__.Call(__key__)] := __value__
    }
  }
  return __result__
}
shell_2() {
  __alert__ := __shell_module_4__
  __tail__ := __shell_module_18__
  __length__ := __shell_module_15__
  return Func("shell_1").Bind(__length__, __tail__)
}
shell_3(__drop__, list) {
  return __drop__.Call(list, 1)
}
shell_4() {
  __drop__ := __shell_module_20__
  return Func("shell_3").Bind(__drop__)
}
shell_5(n, _it, i) {
  return i >= n
}
shell_6(__filter__, list, n := 1) {
  return __filter__.Call(list, Func("shell_5").Bind(n))
}
shell_7() {
  __filter__ := __shell_module_21__
  return Func("shell_6").Bind(__filter__)
}
shell_8(__push__, list, callback) {
  __listResult__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if !(callback.Call(__item__, __i__)) {
      continue
    }
    __push__.Call(__listResult__, __item__)
  }
  return __listResult__
}
shell_9() {
  __push__ := __shell_module_16__
  return Func("shell_8").Bind(__push__)
}
shell_10(__length__, __push__, list, n := 1) {
  __listNew__ := []
  __len__ := __length__.Call(list)
  __i__ := 0
  while (__i__ < __len__ / n) {
    __listTemp__ := []
    __j__ := 0
    while (__j__ < n) {
      __index__ := __i__ * n + __j__
      if !(__index__ < __len__) {
        break
      }
      __push__.Call(__listTemp__, list[__ci_shell__.Call(__index__)])
      __j__++
    }
    __push__.Call(__listNew__, __listTemp__)
    __i__++
  }
  return __listNew__
}
shell_11() {
  __length__ := __shell_module_15__
  __push__ := __shell_module_16__
  return Func("shell_10").Bind(__length__, __push__)
}
shell_12(__length__, callback, args*) {
  if !(callback.Name) {
    if !(__length__.Call(args)) {
      return callback
    }
    throw Exception("$.bind: cannot bind a bound function")
  }
  return callback.Bind(args*)
}
shell_13() {
  __length__ := __shell_module_15__
  return Func("shell_12").Bind(__length__)
}
shell_14(__getType__, list, value*) {
  __type__ := __getType__.Call(list)
  if !(__type__ == "array") {
    throw Exception("$.push: invalid type '" . (__type__) . "'")
  }
  for __index_for__, __v__ in value {
    list.Push(__v__)
  }
  return list.Length()
}
shell_15() {
  __getType__ := __shell_module_19__
  __push__ := Func("shell_14").Bind(__getType__)
  return __push__
}
shell_16(__getType__, ipt) {
  __type__ := __getType__.Call(ipt)
  switch __type__ {
    case "array": {
      return ipt.Length()
    }
    case "object": {
      return ipt.Count()
    }
    case "string": {
      return StrLen(ipt)
    }
    default: {
      throw Exception("$.length: invalid type '" . (__type__) . "'")
    }
  }
}
shell_17() {
  __getType__ := __shell_module_19__
  return Func("shell_16").Bind(__getType__)
}
shell_18(__replace__, key := "left") {
  key := __replace__.Call(key, "-", "")
  key := __replace__.Call(key, ":", " ")
  Click, % key
  return
}
shell_19() {
  __replace__ := __shell_module_17__
  return Func("shell_18").Bind(__replace__)
}
shell_20(__exit__) {
  if (A_IsAdmin) {
    return
  }
  Run *RunAs "%A_ScriptFullPath%"
  __exit__.Call()
}
shell_21() {
  __exit__ := __shell_module_14__
  return Func("shell_20").Bind(__exit__)
}
shell_22(ipt) {
  if ipt is Number
    return "number"
  if (IsFunc(ipt)) {
    return "function"
  }
  if (IsObject(ipt)) {
    if (ipt.Count() == ipt.Length()) {
      if !(ipt.Length() >= 0) {
        return "function"
      }
      return "array"
    }
    return "object"
  }
  return "string"
}
shell_23() {
  return Func("shell_22")
}
shell_24(ipt, searchment, replacement, limit := -1) {
  return StrReplace(ipt, searchment, replacement, limit)
}
shell_25() {
  return Func("shell_24")
}
shell_26() {
  return ExitApp
}
shell_27() {
  return Func("shell_26")
}
shell_28(callback) {
  if !(callback) {
    return
  }
  setTimer, % callback, Delete
  return
}
shell_29() {
  return Func("shell_28")
}
shell_30(callback) {
  if !(callback) {
    return
  }
  SetTimer, % callback, Delete
  return
}
shell_31() {
  return Func("shell_30")
}
shell_32(n) {
  return Ceil(n)
}
shell_33() {
  return Func("shell_32")
}
shell_34(block) {
  if (block) {
    BlockInput, On
    return
  }
  BlockInput, Off
  return
}
shell_35() {
  return Func("shell_34")
}
shell_36() {
  return SoundBeep
}
shell_37() {
  return Func("shell_36")
}
shell_38(message) {
  MsgBox, % message
  return
}
shell_39() {
  return Func("shell_38")
}
shell_40(args*) {
  __result__ := 0
  for __index_for__, __arg__ in args {
    __result__ := __result__ + __arg__
  }
  return __result__
}
shell_41() {
  return Func("shell_40")
}
shell_42(n) {
  return Abs(n)
}
shell_43() {
  return Func("shell_42")
}
shell_44(__ipt__) {
  if __ipt__ is Number
    return __ipt__ + 1
  return __ipt__
}
