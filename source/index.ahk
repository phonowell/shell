; Generated by Coffee-AHK/0.0.48
global __ci_shell__ := Func("shell_241")
global __shell_module_1__ := (Func("shell_240")).Call()
global __shell_module_2__ := (Func("shell_238")).Call()
global __shell_module_5__ := (Func("shell_236")).Call()
global __shell_module_7__ := (Func("shell_234")).Call()
global __shell_module_8__ := (Func("shell_232")).Call()
global __shell_module_10__ := (Func("shell_230")).Call()
global __shell_module_11__ := (Func("shell_228")).Call()
global __shell_module_21__ := (Func("shell_226")).Call()
global __shell_module_26__ := (Func("shell_224")).Call()
global __shell_module_31__ := (Func("shell_222")).Call()
global __shell_module_32__ := (Func("shell_220")).Call()
global __shell_module_34__ := (Func("shell_218")).Call()
global __shell_module_36__ := (Func("shell_216")).Call()
global __shell_module_38__ := (Func("shell_214")).Call()
global __shell_module_39__ := (Func("shell_212")).Call()
global __shell_module_40__ := (Func("shell_210")).Call()
global __shell_module_47__ := (Func("shell_208")).Call()
global __shell_module_51__ := (Func("shell_206")).Call()
global __shell_module_52__ := (Func("shell_204")).Call()
global __shell_module_55__ := (Func("shell_202")).Call()
global __shell_module_57__ := (Func("shell_200")).Call()
global __shell_module_58__ := (Func("shell_198")).Call()
global __shell_module_60__ := (Func("shell_196")).Call()
global __shell_module_68__ := (Func("shell_193")).Call()
global __shell_module_69__ := (Func("shell_191")).Call()
global __shell_module_71__ := (Func("shell_189")).Call()
global __shell_module_72__ := (Func("shell_187")).Call()
global __shell_module_77__ := (Func("shell_185")).Call()
global __shell_module_80__ := (Func("shell_183")).Call()
global __shell_module_81__ := (Func("shell_181")).Call()
global __shell_module_83__ := (Func("shell_179")).Call()
global __shell_module_84__ := (Func("shell_177")).Call()
global __shell_module_89__ := (Func("shell_175")).Call()
global __shell_module_91__ := (Func("shell_173")).Call()
global __shell_module_92__ := (Func("shell_171")).Call()
global __shell_module_93__ := (Func("shell_169")).Call()
global __shell_module_94__ := (Func("shell_167")).Call()
global __shell_module_98__ := (Func("shell_165")).Call()
class WindowShell {
  exe := ""
  __New(exe) {
    this.exe := "ahk_exe " . (exe) . ""
  }
  blur := Func("shell_164").Bind(this)
  close := Func("shell_163").Bind(this)
  focus := Func("shell_162").Bind(this)
  getBounds := Func("shell_161").Bind(this)
  hide := Func("shell_160").Bind(this)
  isActive := Func("shell_159").Bind(this)
  isExist := Func("shell_158").Bind(this)
  isFullScreen := Func("shell_157").Bind(this)
  kill := Func("shell_156").Bind(this)
  maximize := Func("shell_155").Bind(this)
  minimize := Func("shell_154").Bind(this)
  restore := Func("shell_153").Bind(this)
  setPriority := Func("shell_152").Bind(this)
  setStyle := Func("shell_151").Bind(this)
  show := Func("shell_150").Bind(this)
  wait := Func("shell_149").Bind(this)
}
$.window := Func("shell_148")
global __shell_module_3__ := (Func("shell_147")).Call()
global __shell_module_4__ := (Func("shell_145")).Call()
global __shell_module_12__ := (Func("shell_143")).Call()
global __shell_module_16__ := (Func("shell_141")).Call()
global __shell_module_29__ := (Func("shell_139")).Call()
global __shell_module_30__ := (Func("shell_137")).Call()
global __shell_module_35__ := (Func("shell_135")).Call()
global __shell_module_42__ := (Func("shell_133")).Call()
global __shell_module_43__ := (Func("shell_131")).Call()
global __shell_module_44__ := (Func("shell_129")).Call()
global __shell_module_45__ := (Func("shell_127")).Call()
global __shell_module_46__ := (Func("shell_125")).Call()
global __shell_module_50__ := (Func("shell_123")).Call()
global __shell_module_56__ := (Func("shell_121")).Call()
global __shell_module_61__ := (Func("shell_119")).Call()
global __shell_module_62__ := (Func("shell_117")).Call()
global __shell_module_65__ := (Func("shell_115")).Call()
global __shell_module_66__ := (Func("shell_113")).Call()
global __shell_module_76__ := (Func("shell_111")).Call()
global __shell_module_79__ := (Func("shell_109")).Call()
global __shell_module_82__ := (Func("shell_107")).Call()
global __replace__ := __shell_module_69__
global __noop__ := __shell_module_57__
class FileShell {
  source := ""
  __New(source) {
    this.source := source
  }
  append := Func("shell_105").Bind(this)
  isExist := Func("shell_104").Bind(this)
  read := Func("shell_103").Bind(this)
  remove := Func("shell_102").Bind(this)
  write := Func("shell_101").Bind(this)
}
__noop__.Call(FileShell)
global __shell_module_6__ := (Func("shell_100")).Call()
global __shell_module_9__ := (Func("shell_98")).Call()
global __shell_module_25__ := (Func("shell_96")).Call()
global __shell_module_27__ := (Func("shell_94")).Call()
global __shell_module_28__ := (Func("shell_92")).Call()
global __shell_module_33__ := (Func("shell_90")).Call()
global __shell_module_48__ := (Func("shell_86")).Call()
global __shell_module_49__ := (Func("shell_84")).Call()
global __shell_module_53__ := (Func("shell_82")).Call()
global __shell_module_59__ := (Func("shell_80")).Call()
global __shell_module_63__ := (Func("shell_78")).Call()
global __shell_module_67__ := (Func("shell_76")).Call()
global __shell_module_70__ := (Func("shell_74")).Call()
global __shell_module_75__ := (Func("shell_72")).Call()
global __shell_module_86__ := (Func("shell_70")).Call()
global __shell_module_90__ := (Func("shell_68")).Call()
global __shell_module_95__ := (Func("shell_66")).Call()
global __shell_module_96__ := (Func("shell_64")).Call()
global __shell_module_14__ := (Func("shell_62")).Call()
global __shell_module_20__ := (Func("shell_59")).Call()
global __shell_module_37__ := (Func("shell_56")).Call()
global __shell_module_41__ := (Func("shell_54")).Call()
global __shell_module_73__ := (Func("shell_52")).Call()
global __shell_module_74__ := (Func("shell_50")).Call()
global __shell_module_78__ := (Func("shell_48")).Call()
global __shell_module_88__ := (Func("shell_45")).Call()
global __shell_module_97__ := (Func("shell_43")).Call()
global __each__ := __shell_module_21__
global __filter__ := __shell_module_28__
__noop__ := __shell_module_57__
global __push__ := __shell_module_65__
global __split__ := __shell_module_80__
class EmitterShell {
  __New() {
    this.bus := []
  }
  emit := Func("shell_41").Bind(this)
  off := Func("shell_36").Bind(this)
  on := Func("shell_33").Bind(this)
  once := Func("shell_32").Bind(this)
}
__noop__.Call(EmitterShell)
global __shell_module_13__ := (Func("shell_31")).Call()
global __shell_module_17__ := (Func("shell_29")).Call()
global __shell_module_19__ := (Func("shell_26")).Call()
global __shell_module_22__ := (Func("shell_23")).Call()
global __shell_module_23__ := (Func("shell_21")).Call()
global __shell_module_24__ := (Func("shell_19")).Call()
global __shell_module_64__ := (Func("shell_17")).Call()
global __shell_module_85__ := (Func("shell_13")).Call()
global __shell_module_87__ := (Func("shell_11")).Call()
global __shell_module_15__ := (Func("shell_7")).Call()
global __shell_module_18__ := (Func("shell_5")).Call()
global __shell_module_54__ := (Func("shell_2")).Call()
global __abs__ := __shell_module_1__
global __add__ := __shell_module_2__
global __admin__ := __shell_module_3__
global __alert__ := __shell_module_4__
global __beep__ := __shell_module_5__
global __bind__ := __shell_module_6__
global __blockInput__ := __shell_module_7__
global __ceil__ := __shell_module_8__
global __chunk__ := __shell_module_9__
global __clearInterval__ := __shell_module_10__
global __clearTimeout__ := __shell_module_11__
global __click__ := __shell_module_12__
global __clone__ := __shell_module_13__
global __compact__ := __shell_module_14__
global __concat__ := __shell_module_15__
global __confirm__ := __shell_module_16__
global __debounce__ := __shell_module_17__
global __defer__ := __shell_module_18__
global __delay__ := __shell_module_19__
global __drop__ := __shell_module_20__
__each__ := __shell_module_21__
global __echo__ := __shell_module_22__
global __emitter__ := __shell_module_23__
global __eq__ := __shell_module_24__
global __exec__ := __shell_module_25__
global __exit__ := __shell_module_26__
global __file__ := __shell_module_27__
__filter__ := __shell_module_28__
global __findColor__ := __shell_module_29__
global __findImage__ := __shell_module_30__
global __first__ := __shell_module_31__
global __floor__ := __shell_module_32__
global __formatHotkey__ := __shell_module_33__
global __get__ := __shell_module_34__
global __getColor__ := __shell_module_35__
global __getPosition__ := __shell_module_36__
global __getState__ := __shell_module_37__
global __getType__ := __shell_module_38__
global __gt__ := __shell_module_39__
global __gte__ := __shell_module_40__
global __includes__ := __shell_module_41__
global __isArray__ := __shell_module_42__
global __isFunction__ := __shell_module_43__
global __isNumber__ := __shell_module_44__
global __isObject__ := __shell_module_45__
global __isString__ := __shell_module_46__
global __join__ := __shell_module_47__
global __keys__ := __shell_module_48__
global __last__ := __shell_module_49__
global __length__ := __shell_module_50__
global __lt__ := __shell_module_51__
global __lte__ := __shell_module_52__
global __map__ := __shell_module_53__
global __mixin__ := __shell_module_54__
global __mod__ := __shell_module_55__
global __move__ := __shell_module_56__
__noop__ := __shell_module_57__
global __now__ := __shell_module_58__
global __nth__ := __shell_module_59__
global __once__ := __shell_module_60__
global __open__ := __shell_module_61__
global __play__ := __shell_module_62__
global __pop__ := __shell_module_63__
global __press__ := __shell_module_64__
__push__ := __shell_module_65__
global __random__ := __shell_module_66__
global __range__ := __shell_module_67__
global __reload__ := __shell_module_68__
__replace__ := __shell_module_69__
global __reverse__ := __shell_module_70__
global __round__ := __shell_module_71__
global __setFixed__ := __shell_module_72__
global __setInterval__ := __shell_module_73__
global __setTimeout__ := __shell_module_74__
global __shift__ := __shell_module_75__
global __shuffle__ := __shell_module_76__
global __sleep__ := __shell_module_77__
global __slice__ := __shell_module_78__
global __sort__ := __shell_module_79__
__split__ := __shell_module_80__
global __startsWith__ := __shell_module_81__
global __subString__ := __shell_module_82__
global __sum__ := __shell_module_83__
global __suspend__ := __shell_module_84__
global __tail__ := __shell_module_85__
global __take__ := __shell_module_86__
global __throttle__ := __shell_module_87__
global __tip__ := __shell_module_88__
global __toLowerCase__ := __shell_module_89__
global __toString__ := __shell_module_90__
global __toUpperCase__ := __shell_module_91__
global __trim__ := __shell_module_92__
global __trimEnd__ := __shell_module_93__
global __trimStart__ := __shell_module_94__
global __uniq__ := __shell_module_95__
global __unshift__ := __shell_module_96__
global __values__ := __shell_module_97__
global __version__ := __shell_module_98__
global __window__ := __shell_module_99__
global $ := {}
__mixin__.Call($, {abs: __abs__})
__mixin__.Call($, {add: __add__})
__mixin__.Call($, {admin: __admin__})
__mixin__.Call($, {alert: __alert__})
__mixin__.Call($, {beep: __beep__})
__mixin__.Call($, {bind: __bind__})
__mixin__.Call($, {blockInput: __blockInput__})
__mixin__.Call($, {ceil: __ceil__})
__mixin__.Call($, {chunk: __chunk__})
__mixin__.Call($, {clearInterval: __clearInterval__})
__mixin__.Call($, {clearTimeout: __clearTimeout__})
__mixin__.Call($, {click: __click__})
__mixin__.Call($, {clone: __clone__})
__mixin__.Call($, {compact: __compact__})
__mixin__.Call($, {concat: __concat__})
__mixin__.Call($, {confirm: __confirm__})
__mixin__.Call($, {debounce: __debounce__})
__mixin__.Call($, {defer: __defer__})
__mixin__.Call($, {delay: __delay__})
__mixin__.Call($, {drop: __drop__})
__mixin__.Call($, {each: __each__})
__mixin__.Call($, {echo: __echo__})
__mixin__.Call($, {emitter: __emitter__})
__mixin__.Call($, {eq: __eq__})
__mixin__.Call($, {exec: __exec__})
__mixin__.Call($, {exit: __exit__})
__mixin__.Call($, {file: __file__})
__mixin__.Call($, {filter: __filter__})
__mixin__.Call($, {findColor: __findColor__})
__mixin__.Call($, {findImage: __findImage__})
__mixin__.Call($, {first: __first__})
__mixin__.Call($, {floor: __floor__})
__mixin__.Call($, {forEach: __each__})
__mixin__.Call($, {formatHotkey: __formatHotkey__})
__mixin__.Call($, {get: __get__})
__mixin__.Call($, {getColor: __getColor__})
__mixin__.Call($, {getPosition: __getPosition__})
__mixin__.Call($, {getState: __getState__})
__mixin__.Call($, {getType: __getType__})
__mixin__.Call($, {gt: __gt__})
__mixin__.Call($, {gte: __gte__})
__mixin__.Call($, {head: __first__})
__mixin__.Call($, {includes: __includes__})
__mixin__.Call($, {isArray: __isArray__})
__mixin__.Call($, {isFunction: __isFunction__})
__mixin__.Call($, {isNumber: __isNumber__})
__mixin__.Call($, {isObject: __isObject__})
__mixin__.Call($, {isString: __isString__})
__mixin__.Call($, {join: __join__})
__mixin__.Call($, {keys: __keys__})
__mixin__.Call($, {last: __last__})
__mixin__.Call($, {length: __length__})
__mixin__.Call($, {lt: __lt__})
__mixin__.Call($, {lte: __lte__})
__mixin__.Call($, {map: __map__})
__mixin__.Call($, {mixin: __mixin__})
__mixin__.Call($, {mod: __mod__})
__mixin__.Call($, {move: __move__})
__mixin__.Call($, {noop: __noop__})
__mixin__.Call($, {now: __now__})
__mixin__.Call($, {nth: __nth__})
__mixin__.Call($, {once: __once__})
__mixin__.Call($, {open: __open__})
__mixin__.Call($, {play: __play__})
__mixin__.Call($, {pop: __pop__})
__mixin__.Call($, {press: __press__})
__mixin__.Call($, {push: __push__})
__mixin__.Call($, {random: __random__})
__mixin__.Call($, {range: __range__})
__mixin__.Call($, {reload: __reload__})
__mixin__.Call($, {replace: __replace__})
__mixin__.Call($, {reverse: __reverse__})
__mixin__.Call($, {round: __round__})
__mixin__.Call($, {setFixed: __setFixed__})
__mixin__.Call($, {setInterval: __setInterval__})
__mixin__.Call($, {setTimeout: __setTimeout__})
__mixin__.Call($, {shift: __shift__})
__mixin__.Call($, {shuffle: __shuffle__})
__mixin__.Call($, {sleep: __sleep__})
__mixin__.Call($, {slice: __slice__})
__mixin__.Call($, {sort: __sort__})
__mixin__.Call($, {split: __split__})
__mixin__.Call($, {startsWith: __startsWith__})
__mixin__.Call($, {subString: __subString__})
__mixin__.Call($, {sum: __sum__})
__mixin__.Call($, {suspend: __suspend__})
__mixin__.Call($, {tail: __tail__})
__mixin__.Call($, {take: __take__})
__mixin__.Call($, {throttle: __throttle__})
__mixin__.Call($, {tip: __tip__})
__mixin__.Call($, {toLower: __toLowerCase__})
__mixin__.Call($, {toLowerCase: __toLowerCase__})
__mixin__.Call($, {toString: __toString__})
__mixin__.Call($, {toUpper: __toUpperCase__})
__mixin__.Call($, {toUpperCase: __toUpperCase__})
__mixin__.Call($, {trim: __trim__})
__mixin__.Call($, {trimEnd: __trimEnd__})
__mixin__.Call($, {trimStart: __trimStart__})
__mixin__.Call($, {uniq: __uniq__})
__mixin__.Call($, {unshift: __unshift__})
__mixin__.Call($, {values: __values__})
__mixin__.Call($, {VERSION: __version__})
__mixin__.Call($, {window: __window__})
shell_1(args*) {
  if !(__length__.Call(args)) {
    throw Exception("$.mixin: invalid arguments")
  }
  __result__ := args[1]
  for __index_for__, __item__ in __tail__.Call(args) {
    for __key__, __value__ in __item__ {
      __result__[__ci_shell__.Call(__key__)] := __value__
    }
  }
  return __result__
}
shell_2() {
  __length__ := __shell_module_50__
  __tail__ := __shell_module_85__
  return Func("shell_1")
}
shell_3(callback, args) {
  return callback.Call(args*)
}
shell_4(callback, args*) {
  return __delay__.Call(Func("shell_3").Bind(callback, args), 1)
}
shell_5() {
  __delay__ := __shell_module_19__
  return Func("shell_4")
}
shell_6(list, args*) {
  __listNew__ := __clone__.Call(list)
  for __index_for__, __arg__ in args {
    if (__isArray__.Call(__arg__)) {
      for __index_for__, __item__ in __arg__ {
        __push__.Call(__listNew__, __item__)
      }
    } else {
      __push__.Call(__listNew__, __arg__)
    }
  }
  return __listNew__
}
shell_7() {
  __clone__ := __shell_module_13__
  __isArray__ := __shell_module_42__
  __push__ := __shell_module_65__
  return Func("shell_6")
}
shell_8(callback, __tsThrottle__, index) {
  callback.Call()
  __tsThrottle__[__ci_shell__.Call(index)] := __now__.Call()
}
shell_9(__tThrottle__, callback, __tsThrottle__, time, index) {
  __clearTimeout__.Call(__tThrottle__[__ci_shell__.Call(index)])
  __tThrottle__[__ci_shell__.Call(index)] := __setTimeout__.Call(Func("shell_8").Bind(callback, __tsThrottle__, index), __tsThrottle__[__ci_shell__.Call(index)] - __now__.Call() + time)
}
shell_10(__tsThrottle__, __tThrottle__, time, callback) {
  __iThrottle__++
  __tsThrottle__[__ci_shell__.Call(__iThrottle__)] := 0
  return Func("shell_9").Bind(__tThrottle__, callback, __tsThrottle__, time, __iThrottle__)
}
shell_11() {
  __clearTimeout__ := __shell_module_11__
  __now__ := __shell_module_58__
  __setTimeout__ := __shell_module_74__
  __iThrottle__ := 0
  __tThrottle__ := {}
  __tsThrottle__ := {}
  return Func("shell_10").Bind(__tsThrottle__, __tThrottle__)
}
shell_12(list) {
  return __drop__.Call(list, 1)
}
shell_13() {
  __drop__ := __shell_module_20__
  return Func("shell_12")
}
shell_14(__validateInputPress__, __formatInputPress__, listInput*) {
  if !(__validateInputPress__.Call(listInput)) {
    return
  }
  __listKey__ := __formatInputPress__.Call(listInput)
  __listResult__ := []
  __len__ := __length__.Call(__listKey__)
  for __i__, __key__ in __listKey__ {
    __i__ := __i__ - 1
    if (__i__ == __len__ - 1) {
      __listResult__[__ci_shell__.Call(__i__)] := __split__.Call(__key__, ":")
      continue
    }
    if (__includes__.Call(__key__, ":")) {
      __listResult__[__ci_shell__.Call(__i__)] := __split__.Call(__key__, ":")
      __listResult__[__ci_shell__.Call((__len__ - 1) * 2 - __i__)] := __split__.Call(__key__, ":")
    } else {
      __listResult__[__ci_shell__.Call(__i__)] := [__key__, "down"]
      __listResult__[__ci_shell__.Call((__len__ - 1) * 2 - __i__)] := [__key__, "up"]
    }
  }
  for __i__, __it__ in __listResult__ {
    __i__ := __i__ - 1
    if (__it__[1] == "win") {
      __it__[1] := "lwin"
    }
    __listResult__[__ci_shell__.Call(__i__)] := __trim__.Call("" . (__it__[1]) . " " . (__it__[2]) . "")
  }
  __result__ := ""
  for __index_for__, __it__ in __listResult__ {
    __result__ := "" . (__result__) . "{" . (__it__) . "}"
  }
  Send, % __result__
  return
}
shell_15(listInput) {
  if !(__length__.Call(listInput)) {
    return false
  }
  __key__ := listInput[1]
  if (__includes__.Call(__key__, "-button")) {
    __key__ := __replace__.Call(__key__, "l-button", "left")
    __key__ := __replace__.Call(__key__, "m-button", "middle")
    __key__ := __replace__.Call(__key__, "r-button", "right")
    __click__.Call(__key__)
    return false
  }
  return true
}
shell_16(listInput) {
  __listKey__ := []
  for __index_for__, __input__ in listInput {
    __ipt__ := __toLowerCase__.Call(__input__)
    __ipt__ := __replace__.Call(__ipt__, " ", "")
    __ipt__ := __replace__.Call(__ipt__, "-", "")
    __push__.Call(__listKey__, (__split__.Call(__ipt__, "+"))*)
  }
  return __listKey__
}
shell_17() {
  __click__ := __shell_module_12__
  __includes__ := __shell_module_41__
  __length__ := __shell_module_50__
  __push__ := __shell_module_65__
  __replace__ := __shell_module_69__
  __split__ := __shell_module_80__
  __toLowerCase__ := __shell_module_89__
  __trim__ := __shell_module_92__
  __formatInputPress__ := 
  Func("shell_16")
  __validateInputPress__ := 
  Func("shell_15")
  return Func("shell_14").Bind(__validateInputPress__, __formatInputPress__)
}
shell_18(value, other) {
  __typeA__ := __getType__.Call(value)
  __typeB__ := __getType__.Call(other)
  if !(__typeA__ == __typeB__) {
    return false
  }
  if (__includes__.Call(["function", "number", "string"], __typeA__)) {
    return value == other
  }
  __lengthA__ := __length__.Call(value)
  __lengthB__ := __length__.Call(other)
  if !(__lengthA__ == __lengthB__) {
    return false
  }
  if (__isArray__.Call(value)) {
    for __i__, __it__ in value {
      __i__ := __i__ - 1
      if !(__eq__.Call(__it__, other[__ci_shell__.Call(__i__)])) {
        return false
      }
    }
    return true
  }
  if (__isObject__.Call(value)) {
    for __k__, __v__ in value {
      if !(__eq__.Call(__v__, other[__ci_shell__.Call(__k__)])) {
        return false
      }
    }
    return true
  }
  throw Exception("$.eq: invalid type '" . (__typeA__) . "'")
}
shell_19() {
  __getType__ := __shell_module_38__
  __includes__ := __shell_module_41__
  __isArray__ := __shell_module_42__
  __isObject__ := __shell_module_45__
  __length__ := __shell_module_50__
  __eq__ := Func("shell_18")
  return __eq__
}
shell_20() {
  new EmitterShell()
}
shell_21() {
  return Func("shell_20")
}
shell_22(message) {
  __tip__.Call("[" . (__now__.Call()) . "] " . (__toString__.Call(message)) . "", [0, 0])
  return message
}
shell_23() {
  __now__ := __shell_module_58__
  __tip__ := __shell_module_88__
  __toString__ := __shell_module_90__
  return Func("shell_22")
}
shell_24(callback, args) {
  return callback.Call(args*)
}
shell_25(callback, time, args*) {
  __timer__ := __setTimeout__.Call(Func("shell_24").Bind(callback, args), time)
  return __timer__
}
shell_26() {
  __setTimeout__ := __shell_module_74__
  return Func("shell_25")
}
shell_27(__tDebounce__, callback, time, index) {
  __clearTimeout__.Call(__tDebounce__[__ci_shell__.Call(index)])
  __tDebounce__[__ci_shell__.Call(index)] := __setTimeout__.Call(callback, time)
}
shell_28(__tDebounce__, time, callback) {
  __iDebounce__++
  return Func("shell_27").Bind(__tDebounce__, callback, time, __iDebounce__)
}
shell_29() {
  __clearTimeout__ := __shell_module_11__
  __setTimeout__ := __shell_module_74__
  __iDebounce__ := 0
  __tDebounce__ := {}
  return Func("shell_28").Bind(__tDebounce__)
}
shell_30(ipt) {
  if (__isArray__.Call(ipt)) {
    return __slice__.Call(ipt)
  }
  if (__isObject__.Call(ipt)) {
    __mapNew__ := {}
    for __key__, __value__ in ipt {
      __mapNew__[__ci_shell__.Call(__key__)] := __value__
    }
    return __mapNew__
  }
  throw Exception("$.clone: invalid type '" . (__getType__.Call(ipt)) . "'")
}
shell_31() {
  __getType__ := __shell_module_38__
  __isArray__ := __shell_module_42__
  __isObject__ := __shell_module_45__
  __slice__ := __shell_module_78__
  return Func("shell_30")
}
shell_32(this, key, callback) {
  __array__ := __split__.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  __push__.Call(this.bus, [__type__, __name__, callback, 1])
  return
}
shell_33(this, key, callback) {
  __array__ := __split__.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  __push__.Call(this.bus, [__type__, __name__, callback, 0])
  return
}
shell_34(__type__, __it__) {
  return __it__[1] != __type__
}
shell_35(__type__, __name__, __it__) {
  return !(__it__[1] == __type__ && __it__[2] == __name__)
}
shell_36(this, key) {
  __array__ := __split__.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  if !(__type__) {
    this.bus := []
    return
  }
  if (__name__) {
    this.bus := __filter__.Call(this.bus, Func("shell_35").Bind(__type__, __name__))
  } else {
    this.bus := __filter__.Call(this.bus, Func("shell_34").Bind(__type__))
  }
  return
}
shell_37(__it__) {
  return __it__[4] != 2
}
shell_38(args, __it__) {
  __it__[3].Call(args*)
  if (__it__[4] == 1) {
    __it__[4] := 2
  }
  return
}
shell_39(__type__, __it__) {
  return __it__[1] == __type__
}
shell_40(__type__, __name__, __it__) {
  return __it__[1] == __type__ && __it__[2] == __name__
}
shell_41(this, key, args*) {
  __array__ := __split__.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  if !(__type__) {
    return
  }
  if (__name__) {
    __list__ := __filter__.Call(this.bus, Func("shell_40").Bind(__type__, __name__))
  } else {
    __list__ := __filter__.Call(this.bus, Func("shell_39").Bind(__type__))
  }
  __each__.Call(__list__, Func("shell_38").Bind(args))
  this.bus := __filter__.Call(this.bus, Func("shell_37"))
  return
}
shell_42(ipt) {
  __type__ := __getType__.Call(ipt)
  if !(__type__ == "object") {
    throw Exception("$.values: invalid type '" . (__type__) . "'")
  }
  __listResult__ := []
  for __index_for__, __key__ in __keys__.Call(ipt) {
    __push__.Call(__listResult__, ipt[__ci_shell__.Call(__key__)])
  }
  return __listResult__
}
shell_43() {
  __getType__ := __shell_module_38__
  __keys__ := __shell_module_48__
  __push__ := __shell_module_65__
  return Func("shell_42")
}
shell_44(message, p := [-1, -1]) {
  if !(message) {
    return message
  }
  if !(p[1] >= 0 && p[2] >= 0) {
    p := __getPosition__.Call()
  }
  __msg__ := __toString__.Call(message)
  __noop__.Call(__msg__)
  ToolTip, % __msg__, % p[1], % p[2]
  return message
}
shell_45() {
  __getPosition__ := __shell_module_36__
  __noop__ := __shell_module_57__
  __toString__ := __shell_module_90__
  return Func("shell_44")
}
shell_46(__pickArgumentSlice__, args*) {
  __array__ := __pickArgumentSlice__.Call(args)
  __list__ := __array__[1]
  __start__ := __array__[2]
  __end__ := __array__[3]
  __type__ := __getType__.Call(__list__)
  if !(__type__ == "array") {
    throw Exception("$.slice: invalid type '" . (__type__) . "'")
  }
  __len__ := __list__.Length()
  if (__start__ > __len__) {
    __start__ := __len__
  }
  if (__start__ < 0) {
    __start__ := __len__ + __start__
  }
  if (__end__ > __len__) {
    __end__ := __len__
  }
  if (__end__ < 0) {
    __end__ := __len__ + __end__
  }
  __isReverse__ := false
  if (__start__ > __end__) {
    __isReverse__ := true
    __array__ := [__end__, __start__]
    __start__ := __array__[1]
    __end__ := __array__[2]
  }
  __listNew__ := []
  __n__ := 0
  __max__ := __end__ - __start__
  while (__n__ < __max__) {
    __push__.Call(__listNew__, __list__[__ci_shell__.Call(__start__ + __n__)])
    __n__++
  }
  if (__isReverse__) {
    return __reverse__.Call(__listNew__)
  }
  return __listNew__
}
shell_47(args) {
  switch __length__.Call(args) {
    case 1: {
      __array__ := [args[1], 0, __length__.Call(args[1])]
      __list__ := __array__[1]
      __start__ := __array__[2]
      __end__ := __array__[3]
    }
    case 2: {
      __array__ := [args[1], args[2], __length__.Call(args[1])]
      __list__ := __array__[1]
      __start__ := __array__[2]
      __end__ := __array__[3]
    }
    case 3: {
      __array__ := args
      __list__ := __array__[1]
      __start__ := __array__[2]
      __end__ := __array__[3]
    }
  }
  return [__list__, __start__, __end__]
}
shell_48() {
  __getType__ := __shell_module_38__
  __length__ := __shell_module_50__
  __push__ := __shell_module_65__
  __reverse__ := __shell_module_70__
  __pickArgumentSlice__ := 
  Func("shell_47")
  return Func("shell_46").Bind(__pickArgumentSlice__)
}
shell_49(callback, time) {
  callback := __bind__.Call(callback)
  if !(__isNumber__.Call(time)) {
    throw Exception("$.setTimeout: invalid type")
  }
  if (time < 1) {
    time := 1
  }
  SetTimer, % callback, % 0 - time
  return callback
}
shell_50() {
  __bind__ := __shell_module_6__
  __isNumber__ := __shell_module_44__
  return Func("shell_49")
}
shell_51(callback, time) {
  callback := __bind__.Call(callback)
  if !(time > 0) {
    throw Exception("$.setInterval: invalid value")
  }
  SetTimer, % callback, % time
  return callback
}
shell_52() {
  __bind__ := __shell_module_6__
  return Func("shell_51")
}
shell_53(ipt, needle) {
  __type__ := __getType__.Call(ipt)
  if ((__isString__.Call(ipt)) || __isNumber__.Call(ipt)) {
    if !(__isString__.Call(needle)) {
      return false
    }
    return (InStr((__toString__.Call(ipt)), needle)) > 0
  }
  if (__isArray__.Call(ipt)) {
    for __index_for__, __it__ in ipt {
      if (__it__ == needle) {
        return true
      }
    }
    return false
  }
  throw Exception("$.includes: invalid type '" . (__type__) . "'")
}
shell_54() {
  __getType__ := __shell_module_38__
  __isArray__ := __shell_module_42__
  __isNumber__ := __shell_module_44__
  __isString__ := __shell_module_46__
  __toString__ := __shell_module_90__
  return Func("shell_53")
}
shell_55(key) {
  key := __formatHotkey__.Call(key)
  return GetKeyState(key, "P")
}
shell_56() {
  __formatHotkey__ := __shell_module_33__
  return Func("shell_55")
}
shell_57(n, _it, i) {
  return i >= n
}
shell_58(list, n := 1) {
  return __filter__.Call(list, Func("shell_57").Bind(n))
}
shell_59() {
  __filter__ := __shell_module_28__
  return Func("shell_58")
}
shell_60(it) {
  return !!it
}
shell_61(list) {
  return __filter__.Call(list, Func("shell_60"))
}
shell_62() {
  __filter__ := __shell_module_28__
  return Func("shell_61")
}
shell_63(list, args*) {
  if !(__isArray__.Call(list)) {
    throw Exception("$.unshift: invalid type '" . (__getType__.Call(list)) . "'")
  }
  list.InsertAt(1, args*)
  return list.Length()
}
shell_64() {
  __getType__ := __shell_module_38__
  __isArray__ := __shell_module_42__
  return Func("shell_63")
}
shell_65(list) {
  __hasString__ := false
  for __index_for__, __item__ in list {
    if (__isString__.Call(__item__)) {
      __hasString__ := true
      break
    }
  }
  __string__ := __join__.Call(list, ",")
  if (__hasString__) {
    Sort, __string__, C U D,
  } else {
    Sort, __string__, N U D,
  }
  return __split__.Call(__string__, ",")
}
shell_66() {
  __isString__ := __shell_module_46__
  __join__ := __shell_module_47__
  __split__ := __shell_module_80__
  return Func("shell_65")
}
shell_67(ipt) {
  if ((__isString__.Call(ipt)) || __isNumber__.Call(ipt)) {
    return ipt
  }
  if (__isArray__.Call(ipt)) {
    __result__ := ""
    for __index_for__, key in ipt {
      __result__ := "" . (__result__) . ", " . (__toString__.Call(key)) . ""
    }
    return "[" . (__trim__.Call(__result__, " ,")) . "]"
  }
  if (__isObject__.Call(ipt)) {
    __result__ := ""
    for key, value in ipt {
      __result__ := "" . (__result__) . ", " . (key) . ": " . (__toString__.Call(value)) . ""
    }
    return "{" . (__trim__.Call(__result__, " ,")) . "}"
  }
  throw Exception("__toString__: invalid type '" . (__getType__.Call(ipt)) . "'")
}
shell_68() {
  __getType__ := __shell_module_38__
  __isArray__ := __shell_module_42__
  __isNumber__ := __shell_module_44__
  __isObject__ := __shell_module_45__
  __isString__ := __shell_module_46__
  __trim__ := __shell_module_92__
  __toString__ := Func("shell_67")
  return __toString__
}
shell_69(list, count := 1) {
  __len__ := __length__.Call(list)
  if !(__len__) {
    return []
  }
  if !(count >= 0) {
    return []
  }
  if (count >= __len__) {
    count := __len__
  }
  __listNew__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if (__i__ >= count) {
      break
    }
    __push__.Call(__listNew__, __item__)
  }
  return __listNew__
}
shell_70() {
  __length__ := __shell_module_50__
  __push__ := __shell_module_65__
  return Func("shell_69")
}
shell_71(list) {
  if !(__isArray__.Call(list)) {
    throw Exception("$.shift: invalid type '" . (__getType__.Call(list)) . "'")
  }
  __first__ := list[1]
  list.RemoveAt(1)
  return __first__
}
shell_72() {
  __getType__ := __shell_module_38__
  __isArray__ := __shell_module_42__
  return Func("shell_71")
}
shell_73(list) {
  __len__ := __length__.Call(list)
  __listNew__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    __listNew__[__ci_shell__.Call(__len__ - 1 - __i__)] := __item__
  }
  for __i__, __item__ in __listNew__ {
    __i__ := __i__ - 1
    list[__ci_shell__.Call(__i__)] := __item__
  }
  return list
}
shell_74() {
  __length__ := __shell_module_50__
  return Func("shell_73")
}
shell_75(args*) {
  switch __length__.Call(args) {
    case 1: {
      __array__ := [0, args[1], 1]
      __start__ := __array__[1]
      __end__ := __array__[2]
      __step__ := __array__[3]
    }
    case 2: {
      __array__ := [args[1], args[2], 1]
      __start__ := __array__[1]
      __end__ := __array__[2]
      __step__ := __array__[3]
    }
    case 3: {
      __array__ := args
      __start__ := __array__[1]
      __end__ := __array__[2]
      __step__ := __array__[3]
    }
    default: {
      throw Exception("$.range: invalid arguments")
    }
  }
  if (__start__ == __end__) {
    return [__start__]
  }
  if (__start__ > __end__) {
    return []
  }
  __listResult__ := []
  __n__ := 0
  __max__ := __end__ - __start__
  while (__n__ < __max__) {
    __push__.Call(__listResult__, __start__ + __step__ * __n__)
    __n__++
  }
  return __listResult__
}
shell_76() {
  __length__ := __shell_module_50__
  __push__ := __shell_module_65__
  return Func("shell_75")
}
shell_77(list) {
  if !(__isArray__.Call(list)) {
    throw Exception("$.pop: invalid type '" . (__getType__.Call(list)) . "'")
  }
  return list.Pop()
}
shell_78() {
  __getType__ := __shell_module_38__
  __isArray__ := __shell_module_42__
  return Func("shell_77")
}
shell_79(list, n := 0) {
  if (n >= 0) {
    return list[__ci_shell__.Call(n)]
  } else {
    return list[__ci_shell__.Call((__length__.Call(list)) + n)]
  }
}
shell_80() {
  __length__ := __shell_module_50__
  return Func("shell_79")
}
shell_81(list, callback) {
  __listResult__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    __push__.Call(__listResult__, callback.Call(__item__, __i__))
  }
  return __listResult__
}
shell_82() {
  __push__ := __shell_module_65__
  return Func("shell_81")
}
shell_83(list) {
  return list[__ci_shell__.Call((__length__.Call(list)) - 1)]
}
shell_84() {
  __length__ := __shell_module_50__
  return Func("shell_83")
}
shell_85(ipt) {
  __type__ := __getType__.Call(ipt)
  if !(__type__ == "object") {
    throw Exception("$.keys: invalid type '" . (__type__) . "'")
  }
  __listResult__ := []
  for __key__, __value__ in ipt {
    __push__.Call(__listResult__, __key__)
  }
  return __sort__.Call(__listResult__)
}
shell_86() {
  __getType__ := __shell_module_38__
  __push__ := __shell_module_65__
  __sort__ := __shell_module_79__
  return Func("shell_85")
}
shell_87(__formatKeyFormatHotkey__, __pickPrefixFormatHotkey__, key) {
  __listKey__ := __formatKeyFormatHotkey__.Call(key)
  __array__ := __pickPrefixFormatHotkey__.Call(__listKey__)
  __prefix__ := __array__[1]
  __listKey__ := __array__[2]
  __result__ := ""
  for __index_for__, __it__ in __listKey__ {
    __result__ := "" . (__result__) . " & " . (__it__) . ""
  }
  return __replace__.Call("" . (__prefix__) . "" . (__trim__.Call(__result__, " &")) . "", ":", " ")
}
shell_88(listKey) {
  if ((__length__.Call(listKey)) == 1) {
    return ["", listKey]
  }
  __prefix__ := ""
  __listNew__ := []
  for __index_for__, __key__ in listKey {
    if (__key__ == "alt") {
      __prefix__ := "" . (__prefix__) . "!"
      continue
    }
    if (__key__ == "ctrl") {
      __prefix__ := "" . (__prefix__) . "^"
      continue
    }
    if (__key__ == "shift") {
      __prefix__ := "" . (__prefix__) . "+"
      continue
    }
    if (__key__ == "win") {
      __prefix__ := "" . (__prefix__) . "#"
      continue
    }
    __push__.Call(__listNew__, __key__)
  }
  return [__prefix__, __listNew__]
}
shell_89(key) {
  __listKey__ := []
  __key__ := __toLowerCase__.Call(key)
  __key__ := __replace__.Call(__key__, " ", "")
  __key__ := __replace__.Call(__key__, "-", "")
  __push__.Call(__listKey__, (__split__.Call(__key__, "+"))*)
  return __listKey__
}
shell_90() {
  __length__ := __shell_module_50__
  __push__ := __shell_module_65__
  __replace__ := __shell_module_69__
  __split__ := __shell_module_80__
  __toLowerCase__ := __shell_module_89__
  __trim__ := __shell_module_92__
  __formatKeyFormatHotkey__ := 
  Func("shell_89")
  __pickPrefixFormatHotkey__ := 
  Func("shell_88")
  return Func("shell_87").Bind(__formatKeyFormatHotkey__, __pickPrefixFormatHotkey__)
}
shell_91(list, callback) {
  __listResult__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if !(callback.Call(__item__, __i__)) {
      continue
    }
    __push__.Call(__listResult__, __item__)
  }
  return __listResult__
}
shell_92() {
  __push__ := __shell_module_65__
  return Func("shell_91")
}
shell_93(source) {
  new FileShell(source)
}
shell_94() {
  return Func("shell_93")
}
shell_95(__input__, __callback__) {
  if (__isString__.Call(__input__)) {
    __input__ := [__input__]
  }
  __input__ := __join__.Call(__input__, " && ")
  RunWait, %comSpec% /c %__input__%,, Hide UseErrorLevel
  __callback__.Call(ErrorLevel)
}
shell_96() {
  __isString__ := __shell_module_46__
  __join__ := __shell_module_47__
  __noop__ := __shell_module_57__
  return Func("shell_95").Bind(__noop__)
}
shell_97(list, n := 1) {
  __listNew__ := []
  __len__ := __length__.Call(list)
  __i__ := 0
  while (__i__ < __len__ / n) {
    __listTemp__ := []
    __j__ := 0
    while (__j__ < n) {
      __index__ := __i__ * n + __j__
      if !(__index__ < __len__) {
        break
      }
      __push__.Call(__listTemp__, list[__ci_shell__.Call(__index__)])
      __j__++
    }
    __push__.Call(__listNew__, __listTemp__)
    __i__++
  }
  return __listNew__
}
shell_98() {
  __length__ := __shell_module_50__
  __push__ := __shell_module_65__
  return Func("shell_97")
}
shell_99(callback, args*) {
  if !(callback.Name) {
    if !(__length__.Call(args)) {
      return callback
    }
    throw Exception("$.bind: cannot bind a bound function")
  }
  return callback.Bind(args*)
}
shell_100() {
  __length__ := __shell_module_50__
  return Func("shell_99")
}
shell_101(this, content) {
  this.remove.Call()
  this.append.Call(content)
  return
}
shell_102(this) {
  if !(this.isExist.Call()) {
    return
  }
  FileDelete, % this.source
  return
}
shell_103(this) {
  if !(this.isExist.Call()) {
    return ""
  }
  __result__ := ""
  FileRead, __result__, % this.source
  return __replace__.Call(__result__, "`r", "")
}
shell_104(this) {
  return FileExist(this.source)
}
shell_105(this, content) {
  __noop__.Call(content)
  FileAppend, % content, % this.source, UTF-8
  return
}
shell_106(text, iStart, iEnd := 0) {
  __type__ := __getType__.Call(text)
  if !(__type__ == "string") {
    throw Exception("$.subString: invalid type '" . (__type__) . "'")
  }
  if (iEnd) {
    __len__ := iEnd - iStart
  } else {
    __len__ := 0
  }
  if !(__len__) {
    return SubStr(text, iStart + 1)
  } else {
    return SubStr(text, iStart + 1, __len__)
  }
}
shell_107() {
  __getType__ := __shell_module_38__
  return Func("shell_106")
}
shell_108(list) {
  __string__ := __join__.Call(list, ",")
  Sort, __string__, C D,
  return __split__.Call(__string__, ",")
}
shell_109() {
  __join__ := __shell_module_47__
  __split__ := __shell_module_80__
  return Func("shell_108")
}
shell_110(list) {
  __string__ := __join__.Call(list, ",")
  Sort, __string__, Random D,
  return __split__.Call(__string__, ",")
}
shell_111() {
  __join__ := __shell_module_47__
  __split__ := __shell_module_80__
  return Func("shell_110")
}
shell_112(__min__ := 0, __max__ := 1) {
  __result__ := 0
  __noop__.Call(__min__, __max__)
  Random, __result__, __min__, __max__
  return __result__
}
shell_113() {
  __noop__ := __shell_module_57__
  return Func("shell_112")
}
shell_114(list, value*) {
  __type__ := __getType__.Call(list)
  if !(__type__ == "array") {
    throw Exception("$.push: invalid type '" . (__type__) . "'")
  }
  for __index_for__, __v__ in value {
    list.Push(__v__)
  }
  return list.Length()
}
shell_115() {
  __getType__ := __shell_module_38__
  return Func("shell_114")
}
shell_116(filename) {
  __noop__.Call(filename)
  SoundPlay, % filename
  return
}
shell_117() {
  __noop__ := __shell_module_57__
  return Func("shell_116")
}
shell_118(source) {
  __noop__.Call(source)
  Run, % source
  return
}
shell_119() {
  __noop__ := __shell_module_57__
  return Func("shell_118")
}
shell_120(p := [-1, -1], speed := 0) {
  if !(p[1] >= 0 && p[2] >= 0) {
    return
  }
  __noop__.Call(speed)
  MouseMove, point[1], point[2], speed
  return
}
shell_121() {
  __noop__ := __shell_module_57__
  return Func("shell_120")
}
shell_122(ipt) {
  __type__ := __getType__.Call(ipt)
  switch __type__ {
    case "array": {
      return ipt.Length()
    }
    case "object": {
      return ipt.Count()
    }
    case "string": {
      return StrLen(ipt)
    }
    default: {
      throw Exception("$.length: invalid type '" . (__type__) . "'")
    }
  }
}
shell_123() {
  __getType__ := __shell_module_38__
  return Func("shell_122")
}
shell_124(ipt) {
  __type__ := __getType__.Call(ipt)
  if !(__type__ == "string") {
    return false
  }
  return true
}
shell_125() {
  __getType__ := __shell_module_38__
  return Func("shell_124")
}
shell_126(ipt) {
  __type__ := __getType__.Call(ipt)
  if !(__type__ == "object") {
    return false
  }
  return true
}
shell_127() {
  __getType__ := __shell_module_38__
  return Func("shell_126")
}
shell_128(ipt) {
  __type__ := __getType__.Call(ipt)
  if !(__type__ == "number") {
    return false
  }
  return true
}
shell_129() {
  __getType__ := __shell_module_38__
  return Func("shell_128")
}
shell_130(ipt) {
  __type__ := __getType__.Call(ipt)
  if !(__type__ == "function") {
    return false
  }
  return true
}
shell_131() {
  __getType__ := __shell_module_38__
  return Func("shell_130")
}
shell_132(ipt) {
  __type__ := __getType__.Call(ipt)
  if !(__type__ == "array") {
    return false
  }
  return true
}
shell_133() {
  __getType__ := __shell_module_38__
  return Func("shell_132")
}
shell_134(p := [-1, -1]) {
  if !((p[1] >= 0 && p[2] >= 0)) {
    p := __getPosition__.Call()
  }
  __result__ := 0
  PixelGetColor, __result__, % p[1], % p[2], RGB
  return __result__
}
shell_135() {
  __getPosition__ := __shell_module_36__
  return Func("shell_134")
}
shell_136(source, start := [-1, -1], end := [-1, -1]) {
  if !((start[1] >= 0 && start[2] >= 0)) {
    start := [0, 0]
  }
  if !((end[1] >= 0 && end[2] >= 0)) {
    end := [A_ScreenWidth, A_ScreenHeight]
  }
  __array__ := [0, 0]
  __x__ := __array__[1]
  __y__ := __array__[2]
  __noop__.Call(source)
  ImageSearch __x__, __y__, start[1], start[2], end[1], end[2], % A_ScriptDir . "\\\" . source
  return [__x__, __y__]
}
shell_137() {
  __noop__ := __shell_module_57__
  return Func("shell_136")
}
shell_138(color, start := [-1, -1], end := [-1, -1], variation := 0) {
  if !((start[1] >= 0 && start[2] >= 0)) {
    start := [0, 0]
  }
  if !((end[1] >= 0 && end[2] >= 0)) {
    end := [A_ScreenWidth, A_ScreenHeight]
  }
  __array__ := [0, 0]
  __x__ := __array__[1]
  __y__ := __array__[2]
  __noop__.Call(color, variation)
  PixelSearch __x__, __y__, start[1], start[2], end[1], end[2], color, variation, Fast RGB
  return [__x__, __y__]
}
shell_139() {
  __noop__ := __shell_module_57__
  return Func("shell_138")
}
shell_140(text, callback) {
  __noop__.Call(text, callback)
  MsgBox, 0x4,, % text
  IfMsgBox Yes
    callback.Call(true)
  else
    callback.Call(false)
  return
}
shell_141() {
  __noop__ := __shell_module_57__
  return Func("shell_140")
}
shell_142(key := "left") {
  key := __replace__.Call(key, "-", "")
  key := __replace__.Call(key, ":", " ")
  Click, % key
  return
}
shell_143() {
  __replace__ := __shell_module_69__
  return Func("shell_142")
}
shell_144(message) {
  __noop__.Call(message)
  MsgBox, % message
  return
}
shell_145() {
  __noop__ := __shell_module_57__
  return Func("shell_144")
}
shell_146() {
  if (A_IsAdmin) {
    return
  }
  Run *RunAs "%A_ScriptFullPath%"
  __exit__.Call()
}
shell_147() {
  __exit__ := __shell_module_26__
  return Func("shell_146")
}
shell_148(exe) {
  return new WindowShell(exe)
}
shell_149(this, callback) {
  WinWait, % this.exe
  if (callback) {
    callback.Call()
  }
}
shell_150(this) {
  if !(this.isExist.Call()) {
    return
  }
  WinShow, % this.exe
}
shell_151(this, style) {
  if !(this.isExist.Call()) {
    return
  }
  WinSet, Style, % style, % this.exe
}
shell_152(this, level) {
  if !(this.isExist.Call()) {
    return
  }
  Process, Priority, % this.exe, % level
}
shell_153(this) {
  if !(this.isExist.Call()) {
    return
  }
  WinRestore, % this.exe
}
shell_154(this) {
  if !(this.isExist.Call()) {
    return
  }
  WinMinimize, % this.exe
}
shell_155(this) {
  if !(this.isExist.Call()) {
    return
  }
  WinMaximize, % this.exe
}
shell_156(this) {
  if !(this.isExist.Call()) {
    return
  }
  WinKill, % this.exe
}
shell_157(this) {
  if !(this.isExist.Call()) {
    return false
  }
  __object__ := this.getBounds.Call()
  x := __object__["x"]
  y := __object__["y"]
  width := __object__["width"]
  height := __object__["height"]
  return x == 0 && y == 0 && width == A_ScreenWidth && height == A_ScreenHeight
}
shell_158(this) {
  return WinExist(this.exe)
}
shell_159(this) {
  return WinActive(this.exe)
}
shell_160(this) {
  if !(this.isExist.Call()) {
    return
  }
  WinHide, % this.exe
}
shell_161(this) {
  if !(this.isExist.Call()) {
    return
  }
  __array__ := [0, 0, 0, 0]
  __x__ := __array__[1]
  __y__ := __array__[2]
  __w__ := __array__[3]
  __h__ := __array__[4]
  WinGetPos, __x__, __y__, __w__, __h__, % this.exe
  return {x: __x__, y: __y__, width: __w__, height: __h__}
}
shell_162(this) {
  if !(this.isExist.Call()) {
    return
  }
  WinActivate, % this.exe
}
shell_163(this) {
  if !(this.isExist.Call()) {
    return
  }
  WinClose, % this.exe
}
shell_164(this) {
  name := "ahk_class Shell_TrayWnd"
  WinActivate, % name
}
shell_165() {
  return "0.0.23"
}
shell_166(ipt, omitting := " `t") {
  return LTrim(ipt, omitting)
}
shell_167() {
  return Func("shell_166")
}
shell_168(ipt, omitting := " `t") {
  return RTrim(ipt, omitting)
}
shell_169() {
  return Func("shell_168")
}
shell_170(ipt, omitting := " `t") {
  return Trim(ipt, omitting)
}
shell_171() {
  return Func("shell_170")
}
shell_172(ipt) {
  __result__ := ipt
  StringUpper, __result__, ipt
  return __result__
}
shell_173() {
  return Func("shell_172")
}
shell_174(ipt) {
  __result__ := ipt
  StringLower, __result__, ipt
  return __result__
}
shell_175() {
  return Func("shell_174")
}
shell_176(isSuspended := "Toggle") {
  if (isSuspended != "Toggle") {
    if (isSuspended) {
      isSuspended := "On"
    } else {
      isSuspended := "Off"
    }
  }
  Suspend, % isSuspended
  return
}
shell_177() {
  return Func("shell_176")
}
shell_178(list) {
  __result__ := 0
  for __index_for__, __n__ in list {
    __result__ := __result__ + __n__
  }
  return __result__
}
shell_179() {
  return Func("shell_178")
}
shell_180(text, string) {
  return (InStr(text, string)) == 1
}
shell_181() {
  return Func("shell_180")
}
shell_182(ipt, delimiter) {
  return StrSplit(ipt, delimiter)
}
shell_183() {
  return Func("shell_182")
}
shell_184(time) {
  if !(time > 0) {
    throw Exception("$.sleep: time is required")
  }
  Sleep, % time
  return
}
shell_185() {
  return Func("shell_184")
}
shell_186(isFixed := "Toggle") {
  if (isFixed != "Toggle") {
    if (isFixed) {
      isFixed := "On"
    } else {
      isFixed := "Off"
    }
  }
  Winset AlwaysOnTop, % isFixed, A
  return
}
shell_187() {
  return Func("shell_186")
}
shell_188(n) {
  return Round(n)
}
shell_189() {
  return Func("shell_188")
}
shell_190(ipt, searchment, replacement, limit := -1) {
  return StrReplace(ipt, searchment, replacement, limit)
}
shell_191() {
  return Func("shell_190")
}
shell_192() {
  return Reload
}
shell_193() {
  return Func("shell_192")
}
shell_194(__cacheOnce__, __i__, callback, args*) {
  if (__cacheOnce__[__ci_shell__.Call(__i__)][1]) {
    return __cacheOnce__[__ci_shell__.Call(__i__)][2]
  }
  __result__ := callback.Call(args*)
  __cacheOnce__[__ci_shell__.Call(__i__)] := [true, __result__]
  return __result__
}
shell_195(__indexOnce__, __cacheOnce__, callback) {
  __i__ := __indexOnce__
  __indexOnce__++
  __cacheOnce__[__ci_shell__.Call(__i__)] := [false, ""]
  return Func("shell_194").Bind(__cacheOnce__, __i__, callback)
}
shell_196() {
  __cacheOnce__ := {}
  __indexOnce__ := 0
  return Func("shell_195").Bind(__indexOnce__, __cacheOnce__)
}
shell_197() {
  return A_TickCount
}
shell_198() {
  return Func("shell_197")
}
shell_199(args*) {
  return
}
shell_200() {
  return Func("shell_199")
}
shell_201(dividend, divisor) {
  return Mod(dividend, divisor)
}
shell_202() {
  return Func("shell_201")
}
shell_203(value, other) {
  return value <= other
}
shell_204() {
  return Func("shell_203")
}
shell_205(value, other) {
  return value < other
}
shell_206() {
  return Func("shell_205")
}
shell_207(list, seperator := ",") {
  __result__ := ""
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if !(__i__) {
      __result__ := __item__
      continue
    }
    __result__ := "" . (__result__) . "" . (seperator) . "" . (__item__) . ""
  }
  return __result__
}
shell_208() {
  return Func("shell_207")
}
shell_209(value, other) {
  return value >= other
}
shell_210() {
  return Func("shell_209")
}
shell_211(value, other) {
  return value > other
}
shell_212() {
  return Func("shell_211")
}
shell_213(ipt) {
  if ipt is Number
    return "number"
  if (IsFunc(ipt)) {
    return "function"
  }
  if (IsObject(ipt)) {
    if (ipt.Count() == ipt.Length()) {
      if !(ipt.Length() >= 0) {
        return "function"
      }
      return "array"
    }
    return "object"
  }
  return "string"
}
shell_214() {
  return Func("shell_213")
}
shell_215() {
  __array__ := [0, 0]
  __x__ := __array__[1]
  __y__ := __array__[2]
  MouseGetPos, __x__, __y__
  return [__x__, __y__]
}
shell_216() {
  return Func("shell_215")
}
shell_217(url, callback) {
  try {
    whr := ComObjCreate("WinHttp.WinHttpRequest.5.1")
    whr.Open("GET", url, true)
    whr.Send()
    whr.WaitForResponse()
    callback.Call(whr.ResponseText)
  } catch {
    callback.Call("")
  }
  return
}
shell_218() {
  return Func("shell_217")
}
shell_219(n) {
  return Floor(n)
}
shell_220() {
  return Func("shell_219")
}
shell_221(list) {
  return list[1]
}
shell_222() {
  return Func("shell_221")
}
shell_223() {
  return ExitApp
}
shell_224() {
  return Func("shell_223")
}
shell_225(list, callback) {
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    callback.Call(__item__, __i__)
  }
  return
}
shell_226() {
  return Func("shell_225")
}
shell_227(callback) {
  if !(callback) {
    return
  }
  setTimer, % callback, Delete
  return
}
shell_228() {
  return Func("shell_227")
}
shell_229(callback) {
  if !(callback) {
    return
  }
  SetTimer, % callback, Delete
  return
}
shell_230() {
  return Func("shell_229")
}
shell_231(n) {
  return Ceil(n)
}
shell_232() {
  return Func("shell_231")
}
shell_233(block) {
  if (block) {
    BlockInput, On
    return
  }
  BlockInput, Off
  return
}
shell_234() {
  return Func("shell_233")
}
shell_235() {
  return SoundBeep
}
shell_236() {
  return Func("shell_235")
}
shell_237(args*) {
  __result__ := 0
  for __index_for__, __arg__ in args {
    __result__ := __result__ + __arg__
  }
  return __result__
}
shell_238() {
  return Func("shell_237")
}
shell_239(n) {
  return Abs(n)
}
shell_240() {
  return Func("shell_239")
}
shell_241(__ipt__) {
  if __ipt__ is Number
    return __ipt__ + 1
  return __ipt__
}
