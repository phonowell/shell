; Generated by Coffee-AHK/0.0.48
global __ci_shell__ := Func("shell_197")
global __shell_module_1__ := (Func("shell_196")).Call()
global __shell_module_2__ := (Func("shell_194")).Call()
global __shell_module_5__ := (Func("shell_192")).Call()
global __shell_module_7__ := (Func("shell_190")).Call()
global __shell_module_8__ := (Func("shell_188")).Call()
global __shell_module_10__ := (Func("shell_186")).Call()
global __shell_module_11__ := (Func("shell_184")).Call()
global __shell_module_21__ := (Func("shell_182")).Call()
global __shell_module_23__ := (Func("shell_180")).Call()
global __shell_module_26__ := (Func("shell_178")).Call()
class FileShell {
  source := ""
  __New(source) {
    this.source := source
  }
  append := Func("shell_176").Bind(this)
  isExist := Func("shell_175").Bind(this)
  read := Func("shell_174").Bind(this)
  remove := Func("shell_173").Bind(this)
  write := Func("shell_172").Bind(this)
}
$.file := Func("shell_171")
$.findColor := Func("shell_170")
$.findImage := Func("shell_169")
$.first := Func("shell_168")
$.head := $.first
$.floor := Func("shell_167")
$.forEach := Func("shell_166")
$.formatHotkey := Func("shell_165")
global __formatKeyFormatHotkey__ := Func("shell_164")
global __pickPrefixFormatHotkey__ := Func("shell_163")
$.get := Func("shell_162")
$.getColor := Func("shell_161")
global __shell_module_37__ := (Func("shell_160")).Call()
$.getState := Func("shell_158")
global __shell_module_39__ := (Func("shell_157")).Call()
$.gt := Func("shell_155")
$.gte := Func("shell_154")
global __shell_module_48__ := (Func("shell_153")).Call()
$.keys := Func("shell_151")
$.last := Func("shell_150")
$.lt := Func("shell_149")
$.lte := Func("shell_148")
global __shell_module_56__ := (Func("shell_147")).Call()
$.move := Func("shell_145")
global __shell_module_58__ := (Func("shell_144")).Call()
global __shell_module_59__ := (Func("shell_142")).Call()
$.nth := Func("shell_140")
global __cacheOnce__ := {}
global __indexOnce__ := 0
$.once := Func("shell_139")
$.open := Func("shell_137")
$.play := Func("shell_136")
$.pop := Func("shell_135")
$.press := Func("shell_134")
global __formatInputPress__ := Func("shell_133")
global __validateInputPress__ := Func("shell_132")
$.range := Func("shell_131")
$.reload := Func("shell_130")
global __shell_module_70__ := (Func("shell_129")).Call()
$.round := Func("shell_127")
$.setFixed := Func("shell_126")
$.setInterval := Func("shell_125")
$.shift := Func("shell_124")
$.shuffle := Func("shell_123")
global __shell_module_78__ := (Func("shell_122")).Call()
$.sort := Func("shell_120")
$.split := Func("shell_119")
$.startsWith := Func("shell_118")
$.subString := Func("shell_117")
$.sum := Func("shell_116")
$.suspend := Func("shell_115")
$.take := Func("shell_114")
global __iThrottle__ := 0
global __tThrottle__ := {}
global __tsThrottle__ := {}
$.throttle := Func("shell_113")
$.toLowerCase := Func("shell_110")
$.toLower := $.toLowerCase
$.toUpperCase := Func("shell_109")
$.toUpper := $.toUpperCase
global __shell_module_93__ := (Func("shell_108")).Call()
$.trimEnd := Func("shell_106")
$.trimStart := Func("shell_105")
$.uniq := Func("shell_104")
$.unshift := Func("shell_103")
$.values := Func("shell_102")
$.VERSION := "0.0.23"
class WindowShell {
  exe := ""
  __New(exe) {
    this.exe := "ahk_exe " . (exe) . ""
  }
  blur := Func("shell_101").Bind(this)
  close := Func("shell_100").Bind(this)
  focus := Func("shell_99").Bind(this)
  getBounds := Func("shell_98").Bind(this)
  hide := Func("shell_97").Bind(this)
  isActive := Func("shell_96").Bind(this)
  isExist := Func("shell_95").Bind(this)
  isFullScreen := Func("shell_94").Bind(this)
  kill := Func("shell_93").Bind(this)
  maximize := Func("shell_92").Bind(this)
  minimize := Func("shell_91").Bind(this)
  restore := Func("shell_90").Bind(this)
  setPriority := Func("shell_89").Bind(this)
  setStyle := Func("shell_88").Bind(this)
  show := Func("shell_87").Bind(this)
  wait := Func("shell_86").Bind(this)
}
$.window := Func("shell_85")
global __shell_module_3__ := (Func("shell_84")).Call()
global __shell_module_4__ := (Func("shell_82")).Call()
global __shell_module_12__ := (Func("shell_80")).Call()
global __shell_module_16__ := (Func("shell_78")).Call()
global __shell_module_43__ := (Func("shell_76")).Call()
global __shell_module_44__ := (Func("shell_74")).Call()
global __shell_module_45__ := (Func("shell_72")).Call()
global __shell_module_46__ := (Func("shell_70")).Call()
global __shell_module_47__ := (Func("shell_68")).Call()
global __shell_module_51__ := (Func("shell_66")).Call()
global __shell_module_66__ := (Func("shell_64")).Call()
global __shell_module_67__ := (Func("shell_62")).Call()
global __shell_module_91__ := (Func("shell_60")).Call()
global __shell_module_6__ := (Func("shell_58")).Call()
global __shell_module_9__ := (Func("shell_56")).Call()
global __shell_module_25__ := (Func("shell_54")).Call()
global __shell_module_28__ := (Func("shell_52")).Call()
global __shell_module_42__ := (Func("shell_50")).Call()
global __shell_module_54__ := (Func("shell_48")).Call()
global __shell_module_71__ := (Func("shell_46")).Call()
global __shell_module_89__ := (Func("shell_44")).Call()
global __shell_module_14__ := (Func("shell_42")).Call()
global __shell_module_20__ := (Func("shell_39")).Call()
global __shell_module_22__ := (Func("shell_36")).Call()
global __shell_module_24__ := (Func("shell_34")).Call()
global __shell_module_75__ := (Func("shell_32")).Call()
global __shell_module_79__ := (Func("shell_30")).Call()
global __each__ := __shell_module_21__
global __filter__ := __shell_module_28__
global __noop__ := __shell_module_58__
global __push__ := __shell_module_66__
class EmitterShell {
  bus := []
  emit := Func("shell_27").Bind(this)
  off := Func("shell_22").Bind(this)
  on := Func("shell_19").Bind(this)
  once := Func("shell_18").Bind(this)
}
__noop__.Call(EmitterShell)
global __shell_module_13__ := (Func("shell_17")).Call()
global __shell_module_17__ := (Func("shell_15")).Call()
global __shell_module_19__ := (Func("shell_12")).Call()
global __shell_module_86__ := (Func("shell_9")).Call()
global __shell_module_15__ := (Func("shell_7")).Call()
global __shell_module_18__ := (Func("shell_5")).Call()
global __shell_module_55__ := (Func("shell_2")).Call()
global __abs__ := __shell_module_1__
global __add__ := __shell_module_2__
global __admin__ := __shell_module_3__
global __alert__ := __shell_module_4__
global __beep__ := __shell_module_5__
global __bind__ := __shell_module_6__
global __blockInput__ := __shell_module_7__
global __ceil__ := __shell_module_8__
global __chunk__ := __shell_module_9__
global __clearInterval__ := __shell_module_10__
global __clearTimeout__ := __shell_module_11__
global __click__ := __shell_module_12__
global __clone__ := __shell_module_13__
global __compact__ := __shell_module_14__
global __concat__ := __shell_module_15__
global __confirm__ := __shell_module_16__
global __debounce__ := __shell_module_17__
global __defer__ := __shell_module_18__
global __delay__ := __shell_module_19__
global __drop__ := __shell_module_20__
__each__ := __shell_module_21__
global __echo__ := __shell_module_22__
global __emitter__ := __shell_module_23__
global __eq__ := __shell_module_24__
global __exec__ := __shell_module_25__
global __exit__ := __shell_module_26__
global __file__ := __shell_module_27__
__filter__ := __shell_module_28__
global __findColor__ := __shell_module_29__
global __findImage__ := __shell_module_30__
global __first__ := __shell_module_31__
global __floor__ := __shell_module_32__
global __forEach__ := __shell_module_33__
global __formatHotkey__ := __shell_module_34__
global __get__ := __shell_module_35__
global __getColor__ := __shell_module_36__
global __getPosition__ := __shell_module_37__
global __getState__ := __shell_module_38__
global __getType__ := __shell_module_39__
global __gt__ := __shell_module_40__
global __gte__ := __shell_module_41__
global __includes__ := __shell_module_42__
global __isArray__ := __shell_module_43__
global __isFunction__ := __shell_module_44__
global __isNumber__ := __shell_module_45__
global __isObject__ := __shell_module_46__
global __isString__ := __shell_module_47__
global __join__ := __shell_module_48__
global __keys__ := __shell_module_49__
global __last__ := __shell_module_50__
global __length__ := __shell_module_51__
global __lt__ := __shell_module_52__
global __lte__ := __shell_module_53__
global __map__ := __shell_module_54__
global __mixin__ := __shell_module_55__
global __mod__ := __shell_module_56__
global __move__ := __shell_module_57__
__noop__ := __shell_module_58__
global __now__ := __shell_module_59__
global __nth__ := __shell_module_60__
global __once__ := __shell_module_61__
global __open__ := __shell_module_62__
global __play__ := __shell_module_63__
global __pop__ := __shell_module_64__
global __press__ := __shell_module_65__
__push__ := __shell_module_66__
global __random__ := __shell_module_67__
global __range__ := __shell_module_68__
global __reload__ := __shell_module_69__
global __replace__ := __shell_module_70__
global __reverse__ := __shell_module_71__
global __round__ := __shell_module_72__
global __setFixed__ := __shell_module_73__
global __setInterval__ := __shell_module_74__
global __setTimeout__ := __shell_module_75__
global __shift__ := __shell_module_76__
global __shuffle__ := __shell_module_77__
global __sleep__ := __shell_module_78__
global __slice__ := __shell_module_79__
global __sort__ := __shell_module_80__
global __split__ := __shell_module_81__
global __startsWith__ := __shell_module_82__
global __subString__ := __shell_module_83__
global __sum__ := __shell_module_84__
global __suspend__ := __shell_module_85__
global __tail__ := __shell_module_86__
global __take__ := __shell_module_87__
global __throttle__ := __shell_module_88__
global __tip__ := __shell_module_89__
global __toLowerCase__ := __shell_module_90__
global __toString__ := __shell_module_91__
global __toUpperCase__ := __shell_module_92__
global __trim__ := __shell_module_93__
global __trimEnd__ := __shell_module_94__
global __trimStart__ := __shell_module_95__
global __uniq__ := __shell_module_96__
global __unshift__ := __shell_module_97__
global __values__ := __shell_module_98__
global __version__ := __shell_module_99__
global __window__ := __shell_module_100__
global $ := {}
__mixin__.Call($, {abs: __abs__})
__mixin__.Call($, {add: __add__})
__mixin__.Call($, {admin: __admin__})
__mixin__.Call($, {alert: __alert__})
__mixin__.Call($, {beep: __beep__})
__mixin__.Call($, {bind: __bind__})
__mixin__.Call($, {blockInput: __blockInput__})
__mixin__.Call($, {ceil: __ceil__})
__mixin__.Call($, {chunk: __chunk__})
__mixin__.Call($, {clearInterval: __clearInterval__})
__mixin__.Call($, {clearTimeout: __clearTimeout__})
__mixin__.Call($, {click: __click__})
__mixin__.Call($, {clone: __clone__})
__mixin__.Call($, {compact: __compact__})
__mixin__.Call($, {concat: __concat__})
__mixin__.Call($, {confirm: __confirm__})
__mixin__.Call($, {debounce: __debounce__})
__mixin__.Call($, {defer: __defer__})
__mixin__.Call($, {delay: __delay__})
__mixin__.Call($, {drop: __drop__})
__mixin__.Call($, {each: __each__})
__mixin__.Call($, {echo: __echo__})
__mixin__.Call($, {emitter: __emitter__})
__mixin__.Call($, {eq: __eq__})
__mixin__.Call($, {exec: __exec__})
__mixin__.Call($, {exit: __exit__})
__mixin__.Call($, {file: __file__})
__mixin__.Call($, {filter: __filter__})
__mixin__.Call($, {findColor: __findColor__})
__mixin__.Call($, {findImage: __findImage__})
__mixin__.Call($, {first: __first__})
__mixin__.Call($, {floor: __floor__})
__mixin__.Call($, {forEach: __forEach__})
__mixin__.Call($, {formatHotkey: __formatHotkey__})
__mixin__.Call($, {get: __get__})
__mixin__.Call($, {getColor: __getColor__})
__mixin__.Call($, {getPosition: __getPosition__})
__mixin__.Call($, {getState: __getState__})
__mixin__.Call($, {getType: __getType__})
__mixin__.Call($, {gt: __gt__})
__mixin__.Call($, {gte: __gte__})
__mixin__.Call($, {includes: __includes__})
__mixin__.Call($, {isArray: __isArray__})
__mixin__.Call($, {isFunction: __isFunction__})
__mixin__.Call($, {isNumber: __isNumber__})
__mixin__.Call($, {isObject: __isObject__})
__mixin__.Call($, {isString: __isString__})
__mixin__.Call($, {join: __join__})
__mixin__.Call($, {keys: __keys__})
__mixin__.Call($, {last: __last__})
__mixin__.Call($, {length: __length__})
__mixin__.Call($, {lt: __lt__})
__mixin__.Call($, {lte: __lte__})
__mixin__.Call($, {map: __map__})
__mixin__.Call($, {mixin: __mixin__})
__mixin__.Call($, {mod: __mod__})
__mixin__.Call($, {move: __move__})
__mixin__.Call($, {noop: __noop__})
__mixin__.Call($, {now: __now__})
__mixin__.Call($, {nth: __nth__})
__mixin__.Call($, {once: __once__})
__mixin__.Call($, {open: __open__})
__mixin__.Call($, {play: __play__})
__mixin__.Call($, {pop: __pop__})
__mixin__.Call($, {press: __press__})
__mixin__.Call($, {push: __push__})
__mixin__.Call($, {random: __random__})
__mixin__.Call($, {range: __range__})
__mixin__.Call($, {reload: __reload__})
__mixin__.Call($, {replace: __replace__})
__mixin__.Call($, {reverse: __reverse__})
__mixin__.Call($, {round: __round__})
__mixin__.Call($, {setFixed: __setFixed__})
__mixin__.Call($, {setInterval: __setInterval__})
__mixin__.Call($, {setTimeout: __setTimeout__})
__mixin__.Call($, {shift: __shift__})
__mixin__.Call($, {shuffle: __shuffle__})
__mixin__.Call($, {sleep: __sleep__})
__mixin__.Call($, {slice: __slice__})
__mixin__.Call($, {sort: __sort__})
__mixin__.Call($, {split: __split__})
__mixin__.Call($, {startsWith: __startsWith__})
__mixin__.Call($, {subString: __subString__})
__mixin__.Call($, {sum: __sum__})
__mixin__.Call($, {suspend: __suspend__})
__mixin__.Call($, {tail: __tail__})
__mixin__.Call($, {take: __take__})
__mixin__.Call($, {throttle: __throttle__})
__mixin__.Call($, {tip: __tip__})
__mixin__.Call($, {toLowerCase: __toLowerCase__})
__mixin__.Call($, {toString: __toString__})
__mixin__.Call($, {toUpperCase: __toUpperCase__})
__mixin__.Call($, {trim: __trim__})
__mixin__.Call($, {trimEnd: __trimEnd__})
__mixin__.Call($, {trimStart: __trimStart__})
__mixin__.Call($, {uniq: __uniq__})
__mixin__.Call($, {unshift: __unshift__})
__mixin__.Call($, {values: __values__})
__mixin__.Call($, {version: __version__})
__mixin__.Call($, {window: __window__})
shell_1(args*) {
  if !(__length__.Call(args)) {
    throw Exception("$.mixin: invalid arguments")
  }
  __result__ := args[1]
  for __index_for__, __item__ in __tail__.Call(args) {
    for __key__, __value__ in __item__ {
      __result__[__ci_shell__.Call(__key__)] := __value__
    }
  }
  return __result__
}
shell_2() {
  __length__ := __shell_module_51__
  __tail__ := __shell_module_86__
  return Func("shell_1")
}
shell_3(callback, args) {
  return callback.Call(args*)
}
shell_4(callback, args*) {
  return __delay__.Call(Func("shell_3").Bind(callback, args), 1)
}
shell_5() {
  __delay__ := __shell_module_19__
  return Func("shell_4")
}
shell_6(list, args*) {
  __listNew__ := __clone__.Call(list)
  for __index_for__, __arg__ in args {
    if (__isArray__.Call(__arg__)) {
      for __index_for__, __item__ in __arg__ {
        __push__.Call(__listNew__, __item__)
      }
    } else {
      __push__.Call(__listNew__, __arg__)
    }
  }
  return __listNew__
}
shell_7() {
  __clone__ := __shell_module_13__
  __isArray__ := __shell_module_43__
  __push__ := __shell_module_66__
  return Func("shell_6")
}
shell_8(list) {
  return __drop__.Call(list, 1)
}
shell_9() {
  __drop__ := __shell_module_20__
  return Func("shell_8")
}
shell_10(callback, args) {
  return callback.Call(args*)
}
shell_11(callback, time, args*) {
  __timer__ := __setTimeout__.Call(Func("shell_10").Bind(callback, args), time)
  return __timer__
}
shell_12() {
  __setTimeout__ := __shell_module_75__
  return Func("shell_11")
}
shell_13(__tDebounce__, callback, time, index) {
  __clearTimeout__.Call(__tDebounce__[__ci_shell__.Call(index)])
  __tDebounce__[__ci_shell__.Call(index)] := __setTimeout__.Call(callback, time)
}
shell_14(__tDebounce__, time, callback) {
  __iDebounce__++
  return Func("shell_13").Bind(__tDebounce__, callback, time, __iDebounce__)
}
shell_15() {
  __clearTimeout__ := __shell_module_11__
  __setTimeout__ := __shell_module_75__
  __iDebounce__ := 0
  __tDebounce__ := {}
  return Func("shell_14").Bind(__tDebounce__)
}
shell_16(ipt) {
  if (__isArray__.Call(ipt)) {
    return __slice__.Call(ipt)
  }
  if (__isObject__.Call(ipt)) {
    __mapNew__ := {}
    for __key__, __value__ in ipt {
      __mapNew__[__ci_shell__.Call(__key__)] := __value__
    }
    return __mapNew__
  }
  throw Exception("$.clone: invalid type '" . (__getType__.Call(ipt)) . "'")
}
shell_17() {
  __getType__ := __shell_module_39__
  __isArray__ := __shell_module_43__
  __isObject__ := __shell_module_46__
  __slice__ := __shell_module_79__
  return Func("shell_16")
}
shell_18(this, key, callback) {
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  __push__.Call(this.bus, [__type__, __name__, callback, 1])
}
shell_19(this, key, callback) {
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  __push__.Call(this.bus, [__type__, __name__, callback, 0])
}
shell_20(__type__, __it__) {
  return __it__[1] != __type__
}
shell_21(__type__, __name__, __it__) {
  return !(__it__[1] == __type__ && __it__[2] == __name__)
}
shell_22(this, key) {
  if !(this.bus) {
    return
  }
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  if !(__type__) {
    this.bus := []
    return
  }
  if (__name__) {
    this.bus := __filter__.Call(this.bus, Func("shell_21").Bind(__type__, __name__))
  } else {
    this.bus := __filter__.Call(this.bus, Func("shell_20").Bind(__type__))
  }
  return
}
shell_23(__it__) {
  return __it__[4] != 2
}
shell_24(args, __it__) {
  __it__[3].Call(args*)
  if (__it__[4] == 1) {
    __it__[4] := 2
  }
  return
}
shell_25(__type__, __it__) {
  return __it__[1] == __type__
}
shell_26(__type__, __name__, __it__) {
  return __it__[1] == __type__ && __it__[2] == __name__
}
shell_27(this, key, args*) {
  if !(this.bus) {
    return
  }
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  if !(__type__) {
    return
  }
  if (__name__) {
    __list__ := __filter__.Call(this.bus, Func("shell_26").Bind(__type__, __name__))
  } else {
    __list__ := __filter__.Call(this.bus, Func("shell_25").Bind(__type__))
  }
  __each__.Call(__list__, Func("shell_24").Bind(args))
  this.bus := __filter__.Call(this.bus, Func("shell_23"))
  return
}
shell_28(__pickArgumentSlice__, args*) {
  __array__ := __pickArgumentSlice__.Call(args)
  __list__ := __array__[1]
  __start__ := __array__[2]
  __end__ := __array__[3]
  __type__ := __getType__.Call(__list__)
  if !(__type__ == "array") {
    throw Exception("$.slice: invalid type '" . (__type__) . "'")
  }
  __len__ := __list__.Length()
  if (__start__ > __len__) {
    __start__ := __len__
  }
  if (__start__ < 0) {
    __start__ := __len__ + __start__
  }
  if (__end__ > __len__) {
    __end__ := __len__
  }
  if (__end__ < 0) {
    __end__ := __len__ + __end__
  }
  __isReverse__ := false
  if (__start__ > __end__) {
    __isReverse__ := true
    __array__ := [__end__, __start__]
    __start__ := __array__[1]
    __end__ := __array__[2]
  }
  __listNew__ := []
  __n__ := 0
  __max__ := __end__ - __start__
  while (__n__ < __max__) {
    __push__.Call(__listNew__, __list__[__ci_shell__.Call(__start__ + __n__)])
    __n__++
  }
  if (__isReverse__) {
    return __reverse__.Call(__listNew__)
  }
  return __listNew__
}
shell_29(args) {
  switch __length__.Call(args) {
    case 1: {
      __array__ := [args[1], 0, __length__.Call(args[1])]
      __list__ := __array__[1]
      __start__ := __array__[2]
      __end__ := __array__[3]
    }
    case 2: {
      __array__ := [args[1], args[2], __length__.Call(args[1])]
      __list__ := __array__[1]
      __start__ := __array__[2]
      __end__ := __array__[3]
    }
    case 3: {
      __array__ := args
      __list__ := __array__[1]
      __start__ := __array__[2]
      __end__ := __array__[3]
    }
  }
  return [__list__, __start__, __end__]
}
shell_30() {
  __getType__ := __shell_module_39__
  __length__ := __shell_module_51__
  __push__ := __shell_module_66__
  __reverse__ := __shell_module_71__
  __pickArgumentSlice__ := 
  Func("shell_29")
  return Func("shell_28").Bind(__pickArgumentSlice__)
}
shell_31(callback, time) {
  callback := __bind__.Call(callback)
  if !(__isNumber__.Call(time)) {
    throw Exception("$.setTimeout: invalid type")
  }
  if (time < 1) {
    time := 1
  }
  SetTimer, % callback, % 0 - time
  return callback
}
shell_32() {
  __bind__ := __shell_module_6__
  __isNumber__ := __shell_module_45__
  return Func("shell_31")
}
shell_33(value, other) {
  __typeA__ := __getType__.Call(value)
  __typeB__ := __getType__.Call(other)
  if !(__typeA__ == __typeB__) {
    return false
  }
  if (__includes__.Call(["function", "number", "string"], __typeA__)) {
    return value == other
  }
  __lengthA__ := __length__.Call(value)
  __lengthB__ := __length__.Call(other)
  if !(__lengthA__ == __lengthB__) {
    return false
  }
  if (__isArray__.Call(value)) {
    for __i__, __it__ in value {
      __i__ := __i__ - 1
      if !(__eq__.Call(__it__, other[__ci_shell__.Call(__i__)])) {
        return false
      }
    }
    return true
  }
  if (__isObject__.Call(value)) {
    for __k__, __v__ in value {
      if !(__eq__.Call(__v__, other[__ci_shell__.Call(__k__)])) {
        return false
      }
    }
    return true
  }
  throw Exception("$.eq: invalid type '" . (__typeA__) . "'")
}
shell_34() {
  __getType__ := __shell_module_39__
  __includes__ := __shell_module_42__
  __isArray__ := __shell_module_43__
  __isObject__ := __shell_module_46__
  __length__ := __shell_module_51__
  __eq__ := Func("shell_33")
  return __eq__
}
shell_35(message) {
  __tip__.Call("[" . (__now__.Call()) . "] " . (__toString__.Call(message)) . "", [0, 0])
  return message
}
shell_36() {
  __now__ := __shell_module_59__
  __tip__ := __shell_module_89__
  __toString__ := __shell_module_91__
  return Func("shell_35")
}
shell_37(n, _it, i) {
  return i >= n
}
shell_38(list, n := 1) {
  return __filter__.Call(list, Func("shell_37").Bind(n))
}
shell_39() {
  __filter__ := __shell_module_28__
  return Func("shell_38")
}
shell_40(it) {
  return !!it
}
shell_41(list) {
  return __filter__.Call(list, Func("shell_40"))
}
shell_42() {
  __filter__ := __shell_module_28__
  return Func("shell_41")
}
shell_43(message, p := [-1, -1]) {
  if !(message) {
    return message
  }
  if !(p[1] >= 0 && p[2] >= 0) {
    p := __getPosition__.Call()
  }
  __msg__ := __toString__.Call(message)
  __noop__.Call(__msg__)
  ToolTip, % __msg__, % p[1], % p[2]
  return message
}
shell_44() {
  __getPosition__ := __shell_module_37__
  __noop__ := __shell_module_58__
  __toString__ := __shell_module_91__
  return Func("shell_43")
}
shell_45(list) {
  __len__ := __length__.Call(list)
  __listNew__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    __listNew__[__ci_shell__.Call(__len__ - 1 - __i__)] := __item__
  }
  for __i__, __item__ in __listNew__ {
    __i__ := __i__ - 1
    list[__ci_shell__.Call(__i__)] := __item__
  }
  return list
}
shell_46() {
  __length__ := __shell_module_51__
  return Func("shell_45")
}
shell_47(list, callback) {
  __listResult__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    __push__.Call(__listResult__, callback.Call(__item__, __i__))
  }
  return __listResult__
}
shell_48() {
  __push__ := __shell_module_66__
  return Func("shell_47")
}
shell_49(ipt, needle) {
  __type__ := __getType__.Call(ipt)
  if ((__isString__.Call(ipt)) || __isNumber__.Call(ipt)) {
    if !(__isString__.Call(needle)) {
      return false
    }
    return (InStr((__toString__.Call(ipt)), needle)) > 0
  }
  if (__isArray__.Call(ipt)) {
    for __index_for__, __it__ in ipt {
      if (__it__ == needle) {
        return true
      }
    }
    return false
  }
  throw Exception("$.includes: invalid type '" . (__type__) . "'")
}
shell_50() {
  __getType__ := __shell_module_39__
  __isArray__ := __shell_module_43__
  __isNumber__ := __shell_module_45__
  __isString__ := __shell_module_47__
  __toString__ := __shell_module_91__
  return Func("shell_49")
}
shell_51(list, callback) {
  __listResult__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if !(callback.Call(__item__, __i__)) {
      continue
    }
    __push__.Call(__listResult__, __item__)
  }
  return __listResult__
}
shell_52() {
  __push__ := __shell_module_66__
  return Func("shell_51")
}
shell_53(__input__, __callback__) {
  if (__isString__.Call(__input__)) {
    __input__ := [__input__]
  }
  __input__ := __join__.Call(__input__, " && ")
  RunWait, %comSpec% /c %__input__%,, Hide UseErrorLevel
  __callback__.Call(ErrorLevel)
}
shell_54() {
  __isString__ := __shell_module_47__
  __join__ := __shell_module_48__
  __noop__ := __shell_module_58__
  return Func("shell_53").Bind(__noop__)
}
shell_55(list, n := 1) {
  __listNew__ := []
  __len__ := __length__.Call(list)
  __i__ := 0
  while (__i__ < __len__ / n) {
    __listTemp__ := []
    __j__ := 0
    while (__j__ < n) {
      __index__ := __i__ * n + __j__
      if !(__index__ < __len__) {
        break
      }
      __push__.Call(__listTemp__, list[__ci_shell__.Call(__index__)])
      __j__++
    }
    __push__.Call(__listNew__, __listTemp__)
    __i__++
  }
  return __listNew__
}
shell_56() {
  __length__ := __shell_module_51__
  __push__ := __shell_module_66__
  return Func("shell_55")
}
shell_57(callback, args*) {
  if !(callback.Name) {
    if !(__length__.Call(args)) {
      return callback
    }
    throw Exception("$.bind: cannot bind a bound function")
  }
  return callback.Bind(args*)
}
shell_58() {
  __length__ := __shell_module_51__
  return Func("shell_57")
}
shell_59(toString, ipt) {
  __type__ := __getType__.Call(ipt)
  if (__type__ == "array") {
    __result__ := ""
    for __index_for__, key in ipt {
      __result__ := "" . (__result__) . ", " . (toString.Call(key)) . ""
    }
    return "[" . (__trim__.Call(__result__, " ,")) . "]"
  } else if (__type__ == "object") {
    __result__ := ""
    for key, value in ipt {
      __result__ := "" . (__result__) . ", " . (key) . ": " . (toString.Call(value)) . ""
    }
    return "{" . (__trim__.Call(__result__, " ,")) . "}"
  }
  return ipt
}
shell_60() {
  __getType__ := __shell_module_39__
  __trim__ := __shell_module_93__
  toString := Func("shell_59").Bind(toString)
  return toString
}
shell_61(__min__ := 0, __max__ := 1) {
  __result__ := 0
  __noop__.Call(__min__, __max__)
  Random, __result__, __min__, __max__
  return __result__
}
shell_62() {
  __noop__ := __shell_module_58__
  return Func("shell_61")
}
shell_63(list, value*) {
  __type__ := __getType__.Call(list)
  if !(__type__ == "array") {
    throw Exception("$.push: invalid type '" . (__type__) . "'")
  }
  for __index_for__, __v__ in value {
    list.Push(__v__)
  }
  return list.Length()
}
shell_64() {
  __getType__ := __shell_module_39__
  return Func("shell_63")
}
shell_65(ipt) {
  __type__ := __getType__.Call(ipt)
  switch __type__ {
    case "array": {
      return ipt.Length()
    }
    case "object": {
      return ipt.Count()
    }
    case "string": {
      return StrLen(ipt)
    }
    default: {
      throw Exception("$.length: invalid type '" . (__type__) . "'")
    }
  }
}
shell_66() {
  __getType__ := __shell_module_39__
  return Func("shell_65")
}
shell_67(ipt) {
  __type__ := __getType__.Call(ipt)
  if !(__type__ == "string") {
    return false
  }
  return true
}
shell_68() {
  __getType__ := __shell_module_39__
  return Func("shell_67")
}
shell_69(ipt) {
  __type__ := __getType__.Call(ipt)
  if !(__type__ == "object") {
    return false
  }
  return true
}
shell_70() {
  __getType__ := __shell_module_39__
  return Func("shell_69")
}
shell_71(ipt) {
  __type__ := __getType__.Call(ipt)
  if !(__type__ == "number") {
    return false
  }
  return true
}
shell_72() {
  __getType__ := __shell_module_39__
  return Func("shell_71")
}
shell_73(ipt) {
  __type__ := __getType__.Call(ipt)
  if !(__type__ == "function") {
    return false
  }
  return true
}
shell_74() {
  __getType__ := __shell_module_39__
  return Func("shell_73")
}
shell_75(ipt) {
  __type__ := __getType__.Call(ipt)
  if !(__type__ == "array") {
    return false
  }
  return true
}
shell_76() {
  __getType__ := __shell_module_39__
  return Func("shell_75")
}
shell_77(text, callback) {
  __noop__.Call(text, callback)
  MsgBox, 0x4,, % text
  IfMsgBox Yes
    callback.Call(true)
  else
    callback.Call(false)
  return
}
shell_78() {
  __noop__ := __shell_module_58__
  return Func("shell_77")
}
shell_79(key := "left") {
  key := __replace__.Call(key, "-", "")
  key := __replace__.Call(key, ":", " ")
  Click, % key
  return
}
shell_80() {
  __replace__ := __shell_module_70__
  return Func("shell_79")
}
shell_81(message) {
  __noop__.Call(message)
  MsgBox, % message
  return
}
shell_82() {
  __noop__ := __shell_module_58__
  return Func("shell_81")
}
shell_83() {
  if (A_IsAdmin) {
    return
  }
  Run *RunAs "%A_ScriptFullPath%"
  __exit__.Call()
}
shell_84() {
  __exit__ := __shell_module_26__
  return Func("shell_83")
}
shell_85(exe) {
  return new WindowShell(exe)
}
shell_86(this, callback) {
  WinWait, % this.exe
  if (callback) {
    callback.Call()
  }
}
shell_87(this) {
  if !(this.isExist.Call()) {
    return
  }
  WinShow, % this.exe
}
shell_88(this, style) {
  if !(this.isExist.Call()) {
    return
  }
  WinSet, Style, % style, % this.exe
}
shell_89(this, level) {
  if !(this.isExist.Call()) {
    return
  }
  Process, Priority, % this.exe, % level
}
shell_90(this) {
  if !(this.isExist.Call()) {
    return
  }
  WinRestore, % this.exe
}
shell_91(this) {
  if !(this.isExist.Call()) {
    return
  }
  WinMinimize, % this.exe
}
shell_92(this) {
  if !(this.isExist.Call()) {
    return
  }
  WinMaximize, % this.exe
}
shell_93(this) {
  if !(this.isExist.Call()) {
    return
  }
  WinKill, % this.exe
}
shell_94(this) {
  if !(this.isExist.Call()) {
    return false
  }
  __object__ := this.getBounds.Call()
  x := __object__["x"]
  y := __object__["y"]
  width := __object__["width"]
  height := __object__["height"]
  return x == 0 && y == 0 && width == A_ScreenWidth && height == A_ScreenHeight
}
shell_95(this) {
  return WinExist(this.exe)
}
shell_96(this) {
  return WinActive(this.exe)
}
shell_97(this) {
  if !(this.isExist.Call()) {
    return
  }
  WinHide, % this.exe
}
shell_98(this) {
  if !(this.isExist.Call()) {
    return
  }
  __array__ := [0, 0, 0, 0]
  __x__ := __array__[1]
  __y__ := __array__[2]
  __w__ := __array__[3]
  __h__ := __array__[4]
  WinGetPos, __x__, __y__, __w__, __h__, % this.exe
  return {x: __x__, y: __y__, width: __w__, height: __h__}
}
shell_99(this) {
  if !(this.isExist.Call()) {
    return
  }
  WinActivate, % this.exe
}
shell_100(this) {
  if !(this.isExist.Call()) {
    return
  }
  WinClose, % this.exe
}
shell_101(this) {
  name := "ahk_class Shell_TrayWnd"
  WinActivate, % name
}
shell_102(ipt) {
  __type__ := $.type.Call(ipt)
  if !(__type__ == "object") {
    throw Exception("$.values: invalid type '" . (__type__) . "'")
  }
  __listResult__ := []
  for __index_for__, __key__ in $.keys.Call(ipt) {
    __listResult__.Push(ipt[__ci_shell__.Call(__key__)])
  }
  return __listResult__
}
shell_103(list, args*) {
  __type__ := $.type.Call(list)
  if !(__type__ == "array") {
    throw Exception("$.unshift: invalid type '" . (__type__) . "'")
  }
  list.InsertAt(1, args*)
  return list.Length()
}
shell_104(list) {
  __hasString__ := false
  for __index_for__, __item__ in list {
    if (($.type.Call(__item__)) == "string") {
      __hasString__ := true
      break
    }
  }
  __string__ := $.join.Call(list, ",")
  if (__hasString__) {
    Sort, __string__, C U D,
  } else {
    Sort, __string__, N U D,
  }
  return $.split.Call(__string__, ",")
}
shell_105(ipt, omitting := " `t") {
  return LTrim(ipt, omitting)
}
shell_106(ipt, omitting := " `t") {
  return RTrim(ipt, omitting)
}
shell_107(ipt, omitting := " `t") {
  return Trim(ipt, omitting)
}
shell_108() {
  return Func("shell_107")
}
shell_109(ipt) {
  StringUpper, __result__, ipt
  return __result__
}
shell_110(ipt) {
  StringLower, __result__, ipt
  return __result__
}
shell_111(callback, index) {
  callback.Call()
  __tsThrottle__[__ci_shell__.Call(index)] := $.now.Call()
}
shell_112(callback, time, index) {
  $.clearTimeout.Call(__tThrottle__[__ci_shell__.Call(index)])
  __tThrottle__[__ci_shell__.Call(index)] := $.setTimeout.Call(Func("shell_111").Bind(callback, index), __tsThrottle__[__ci_shell__.Call(index)] - $.now.Call() + time)
}
shell_113(time, callback) {
  __iThrottle__++
  __tsThrottle__[__ci_shell__.Call(__iThrottle__)] := 0
  return Func("shell_112").Bind(callback, time, __iThrottle__)
}
shell_114(list, count := 1) {
  __len__ := $.length.Call(list)
  if !(__len__) {
    return []
  }
  if !(count >= 0) {
    return []
  }
  if (count >= __len__) {
    count := __len__
  }
  __listNew__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if (__i__ >= count) {
      break
    }
    $.push.Call(__listNew__, __item__)
  }
  return __listNew__
}
shell_115(isSuspended := "Toggle") {
  if (isSuspended != "Toggle") {
    if (isSuspended) {
      isSuspended := "On"
    } else {
      isSuspended := "Off"
    }
  }
  Suspend, % isSuspended
}
shell_116(list) {
  __result__ := 0
  for __index_for__, __n__ in list {
    __result__ := __result__ + __n__
  }
  return __result__
}
shell_117(text, iStart, iEnd := 0) {
  __type__ := $.type.Call(text)
  if !(__type__ == "string") {
    throw Exception("$.subString: invalid type '" . (__type__) . "'")
  }
  if (iEnd) {
    __len__ := iEnd - iStart
  } else {
    __len__ := 0
  }
  if !(__len__) {
    return SubStr(text, iStart + 1)
  } else {
    return SubStr(text, iStart + 1, __len__)
  }
}
shell_118(text, string) {
  return (InStr(text, string)) == 1
}
shell_119(ipt, delimiter) {
  return StrSplit(ipt, delimiter)
}
shell_120(list) {
  __hasString__ := false
  for __index_for__, __item__ in list {
    if (($.type.Call(__item__)) == "string") {
      __hasString__ := true
      break
    }
  }
  __string__ := $.join.Call(list, ",")
  if (__hasString__) {
    Sort, __string__, C D,
  } else {
    Sort, __string__, N D,
  }
  return $.split.Call(__string__, ",")
}
shell_121(time) {
  if !(time > 0) {
    throw Exception("$.sleep: time is required")
  }
  Sleep, % time
  return
}
shell_122() {
  return Func("shell_121")
}
shell_123(list) {
  __string__ := $.join.Call(list, ",")
  Sort, __string__, Random D,
  return __split__.Call(__string__, ",")
}
shell_124(list) {
  __type__ := $.type.Call(list)
  if !(__type__ == "array") {
    throw Exception("$.shift: invalid type '" . (__type__) . "'")
  }
  __first__ := list[1]
  list.RemoveAt(1)
  return __first__
}
shell_125(callback, time) {
  callback := $.bind.Call(callback)
  if !(time > 0) {
    throw Exception("$.setInterval: invalid value")
  }
  SetTimer, % callback, % time
  return callback
}
shell_126(isFixed := "Toggle") {
  if (isFixed != "Toggle") {
    if (isFixed) {
      isFixed := "On"
    } else {
      isFixed := "Off"
    }
  }
  Winset AlwaysOnTop, % isFixed, A
}
shell_127(n) {
  return Round(n)
}
shell_128(ipt, searchment, replacement, limit := -1) {
  return StrReplace(ipt, searchment, replacement, limit)
}
shell_129() {
  return Func("shell_128")
}
shell_130() {
  return Reload
}
shell_131(args*) {
  switch $.length.Call(args) {
    case 1: {
      __array__ := [0, args[1], 1]
      __start__ := __array__[1]
      __end__ := __array__[2]
      __step__ := __array__[3]
    }
    case 2: {
      __array__ := [args[1], args[2], 1]
      __start__ := __array__[1]
      __end__ := __array__[2]
      __step__ := __array__[3]
    }
    case 3: {
      __array__ := args
      __start__ := __array__[1]
      __end__ := __array__[2]
      __step__ := __array__[3]
    }
    default: {
      throw Exception("$.range: invalid arguments")
    }
  }
  if (__start__ == __end__) {
    return [__start__]
  }
  if (__start__ > __end__) {
    return []
  }
  __listResult__ := []
  __n__ := 0
  __max__ := __end__ - __start__
  while (__n__ < __max__) {
    $.push.Call(__listResult__, __start__ + __step__ * __n__)
    __n__++
  }
  return __listResult__
}
shell_132(listInput) {
  if !($.length.Call(listInput)) {
    return false
  }
  __key__ := listInput[1]
  if ($.includes.Call(__key__, "-button")) {
    __key__ := $.replace.Call(__key__, "l-button", "left")
    __key__ := $.replace.Call(__key__, "m-button", "middle")
    __key__ := $.replace.Call(__key__, "r-button", "right")
    $.click.Call(__key__)
    return false
  }
  return true
}
shell_133(listInput) {
  __listKey__ := []
  for __index_for__, __input__ in listInput {
    __ipt__ := $.toLowerCase.Call(__input__)
    __ipt__ := $.replace.Call(__ipt__, " ", "")
    __ipt__ := $.replace.Call(__ipt__, "-", "")
    $.push.Call(__listKey__, ($.split.Call(__ipt__, "+"))*)
  }
  return __listKey__
}
shell_134(listInput*) {
  if !(__validateInputPress__.Call(listInput)) {
    return
  }
  __listKey__ := __formatInputPress__.Call(listInput)
  __listResult__ := []
  __len__ := $.length.Call(__listKey__)
  for __i__, __key__ in __listKey__ {
    __i__ := __i__ - 1
    if (__i__ == __len__ - 1) {
      __listResult__[__ci_shell__.Call(__i__)] := $.split.Call(__key__, ":")
      continue
    }
    if ($.includes.Call(__key__, ":")) {
      __listResult__[__ci_shell__.Call(__i__)] := $.split.Call(__key__, ":")
      __listResult__[__ci_shell__.Call((__len__ - 1) * 2 - __i__)] := $.split.Call(__key__, ":")
    } else {
      __listResult__[__ci_shell__.Call(__i__)] := [__key__, "down"]
      __listResult__[__ci_shell__.Call((__len__ - 1) * 2 - __i__)] := [__key__, "up"]
    }
  }
  for __i__, __it__ in __listResult__ {
    __i__ := __i__ - 1
    if (__it__[1] == "win") {
      __it__[1] := "lwin"
    }
    __listResult__[__ci_shell__.Call(__i__)] := $.trim.Call("" . (__it__[1]) . " " . (__it__[2]) . "")
  }
  __result__ := ""
  for __index_for__, __it__ in __listResult__ {
    __result__ := "" . (__result__) . "{" . (__it__) . "}"
  }
  Send, % __result__
}
shell_135(list) {
  __type__ := $.type.Call(list)
  if !(__type__ == "array") {
    throw Exception("$.pop: invalid type '" . (__type__) . "'")
  }
  return list.Pop()
}
shell_136(filename) {
  SoundPlay, % filename
}
shell_137(source) {
  Run, % source
}
shell_138(__i__, callback, args*) {
  if (__cacheOnce__[__ci_shell__.Call(__i__)][1]) {
    return __cacheOnce__[__ci_shell__.Call(__i__)][2]
  }
  __result__ := callback.Call(args*)
  __cacheOnce__[__ci_shell__.Call(__i__)] := [true, __result__]
  return __result__
}
shell_139(callback) {
  __i__ := __indexOnce__
  __indexOnce__++
  __cacheOnce__[__ci_shell__.Call(__i__)] := [false, ""]
  return Func("shell_138").Bind(__i__, callback)
}
shell_140(list, n := 0) {
  if (n >= 0) {
    return list[__ci_shell__.Call(n)]
  } else {
    return list[__ci_shell__.Call(($.length.Call(list)) + n)]
  }
}
shell_141() {
  return A_TickCount
}
shell_142() {
  return Func("shell_141")
}
shell_143(args*) {
  return
}
shell_144() {
  return Func("shell_143")
}
shell_145(point := "", speed := 0) {
  MouseMove, point[1], point[2], speed
}
shell_146(dividend, divisor) {
  return Mod(dividend, divisor)
}
shell_147() {
  return Func("shell_146")
}
shell_148(value, other) {
  return value <= other
}
shell_149(value, other) {
  return value < other
}
shell_150(list) {
  return list[__ci_shell__.Call(($.length.Call(list)) - 1)]
}
shell_151(ipt) {
  __type__ := $.type.Call(ipt)
  if !(__type__ == "object") {
    throw Exception("$.keys: invalid type '" . (__type__) . "'")
  }
  __listResult__ := []
  for __key__, __value__ in ipt {
    __listResult__.Push(__key__)
  }
  return $.sort.Call(__listResult__)
}
shell_152(list, seperator := ",") {
  __result__ := ""
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if !(__i__) {
      __result__ := __item__
      continue
    }
    __result__ := "" . (__result__) . "" . (seperator) . "" . (__item__) . ""
  }
  return __result__
}
shell_153() {
  return Func("shell_152")
}
shell_154(value, other) {
  return value >= other
}
shell_155(value, other) {
  return value > other
}
shell_156(ipt) {
  if ipt is Number
    return "number"
  if (IsFunc(ipt)) {
    return "function"
  }
  if (IsObject(ipt)) {
    if (ipt.Count() == ipt.Length()) {
      if !(ipt.Length() >= 0) {
        return "function"
      }
      return "array"
    }
    return "object"
  }
  return "string"
}
shell_157() {
  return Func("shell_156")
}
shell_158(key) {
  key := $.formatHotkey.Call(key)
  return GetKeyState(key, "P")
}
shell_159() {
  __array__ := [0, 0]
  __x__ := __array__[1]
  __y__ := __array__[2]
  MouseGetPos, __x__, __y__
  return [__x__, __y__]
}
shell_160() {
  return Func("shell_159")
}
shell_161(p := "") {
  if !(p) {
    p := $.getPosition.Call()
  }
  PixelGetColor, __result__, % p[1], % p[2], RGB
  return __result__
}
shell_162(url, callback) {
  try {
    whr := ComObjCreate("WinHttp.WinHttpRequest.5.1")
    whr.Open("GET", url, true)
    whr.Send()
    whr.WaitForResponse()
    callback.Call(whr.ResponseText)
  } catch {
    callback.Call("")
  }
}
shell_163(listKey) {
  if (($.length.Call(listKey)) == 1) {
    return ["", listKey]
  }
  __prefix__ := ""
  __listNew__ := []
  for __index_for__, __key__ in listKey {
    if (__key__ == "alt") {
      __prefix__ := "" . (__prefix__) . "!"
      continue
    }
    if (__key__ == "ctrl") {
      __prefix__ := "" . (__prefix__) . "^"
      continue
    }
    if (__key__ == "shift") {
      __prefix__ := "" . (__prefix__) . "+"
      continue
    }
    if (__key__ == "win") {
      __prefix__ := "" . (__prefix__) . "#"
      continue
    }
    $.push.Call(__listNew__, __key__)
  }
  return [__prefix__, __listNew__]
}
shell_164(key) {
  __listKey__ := []
  __key__ := $.toLowerCase.Call(key)
  __key__ := $.replace.Call(__key__, " ", "")
  __key__ := $.replace.Call(__key__, "-", "")
  $.push.Call(__listKey__, ($.split.Call(__key__, "+"))*)
  return __listKey__
}
shell_165(key) {
  __listKey__ := __formatKeyFormatHotkey__.Call(key)
  __array__ := __pickPrefixFormatHotkey__.Call(__listKey__)
  __prefix__ := __array__[1]
  __listKey__ := __array__[2]
  __result__ := ""
  for __index_for__, __it__ in __listKey__ {
    __result__ := "" . (__result__) . " & " . (__it__) . ""
  }
  return $.replace.Call("" . (__prefix__) . "" . ($.trim.Call(__result__, " &")) . "", ":", " ")
}
shell_166(list, callback) {
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    callback.Call(__item__, __i__)
  }
}
shell_167(n) {
  return Floor(n)
}
shell_168(list) {
  return list[1]
}
shell_169(source, start := "", end := "") {
  if !(start) {
    start := [0, 0]
  }
  if !(end) {
    end := [A_ScreenWidth, A_ScreenHeight]
  }
  ImageSearch __x__, __y__, start[1], start[2], end[1], end[2], % A_ScriptDir . "\\\" . source
  return [__x__, __y__]
}
shell_170(color, start := "", end := "", variation := 0) {
  if !(start) {
    start := [0, 0]
  }
  if !(end) {
    end := [A_ScreenWidth, A_ScreenHeight]
  }
  PixelSearch __x__, __y__, start[1], start[2], end[1], end[2], color, variation, Fast RGB
  return [__x__, __y__]
}
shell_171(source) {
  return new FileShell(source)
}
shell_172(this, content) {
  this.delete.Call()
  return this.append.Call(content)
}
shell_173(this) {
  if !(this.isExist.Call()) {
    return
  }
  FileDelete, % this.source
}
shell_174(this) {
  if !(this.isExist.Call()) {
    return ""
  }
  FileRead, __result__, % this.source
  return $.replace.Call(__result__, "`r", "")
}
shell_175(this) {
  return FileExist(this.source)
}
shell_176(this, content) {
  FileAppend, % content, % this.source, UTF-8
}
shell_177() {
  return ExitApp
}
shell_178() {
  return Func("shell_177")
}
shell_179() {
  new EmitterShell()
}
shell_180() {
  return Func("shell_179")
}
shell_181(list, callback) {
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    callback.Call(__item__, __i__)
  }
  return
}
shell_182() {
  return Func("shell_181")
}
shell_183(callback) {
  if !(callback) {
    return
  }
  setTimer, % callback, Delete
  return
}
shell_184() {
  return Func("shell_183")
}
shell_185(callback) {
  if !(callback) {
    return
  }
  SetTimer, % callback, Delete
  return
}
shell_186() {
  return Func("shell_185")
}
shell_187(n) {
  return Ceil(n)
}
shell_188() {
  return Func("shell_187")
}
shell_189(block) {
  if (block) {
    BlockInput, On
    return
  }
  BlockInput, Off
  return
}
shell_190() {
  return Func("shell_189")
}
shell_191() {
  return SoundBeep
}
shell_192() {
  return Func("shell_191")
}
shell_193(args*) {
  __result__ := 0
  for __index_for__, __arg__ in args {
    __result__ := __result__ + __arg__
  }
  return __result__
}
shell_194() {
  return Func("shell_193")
}
shell_195(n) {
  return Abs(n)
}
shell_196() {
  return Func("shell_195")
}
shell_197(__ipt__) {
  if __ipt__ is Number
    return __ipt__ + 1
  return __ipt__
}
