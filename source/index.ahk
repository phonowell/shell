; Generated by Coffee-AHK/0.0.37
global __ci_shell__ := Func("shell_69")
global $ := {}
$.abs := Func("shell_68")
$.alert := Func("shell_67")
$.beep := Func("shell_66")
$.blockInput := Func("shell_65")
$.ceil := Func("shell_64")
$.clearInterval := Func("shell_63")
$.clearTimeout := Func("shell_62")
$.click := Func("shell_61")
global __index_debounce__ := 0
global __timer_debounce__ := {}
$.debounce := Func("shell_60")
$.delay := Func("shell_58")
class EmitterShellX {
  bus := []
  emit := Func("shell_57").Bind(this)
  off := Func("shell_56").Bind(this)
  on := Func("shell_55").Bind(this)
}
$.emitter := Func("shell_54")
$.exit := Func("shell_53")
class FileShellX {
  name := ""
  __New(name) {
    this.name := name
  }
  append := Func("shell_52").Bind(this)
  exist := Func("shell_51").Bind(this)
  delete := Func("shell_50").Bind(this)
  load := Func("shell_49").Bind(this)
  save := Func("shell_48").Bind(this)
}
$.file := Func("shell_47")
$.findColor := Func("shell_46")
$.findImage := Func("shell_45")
$.floor := Func("shell_44")
$.formatHotkey := Func("shell_43")
$.getColor := Func("shell_42")
$.getPosition := Func("shell_41")
$.getState := Func("shell_40")
$.i := Func("shell_39")
$.includes := Func("shell_38")
$.info := Func("shell_37")
class KeyBindingShellX {
  mapBound := {}
  mapCallback := {}
  add := Func("shell_36").Bind(this)
  fire := Func("shell_35").Bind(this)
  init := Func("shell_34").Bind(this)
  off := Func("shell_32").Bind(this)
  on := Func("shell_31").Bind(this)
  remove := Func("shell_30").Bind(this)
}
global keyBindingShell := new KeyBindingShellX()
$.off := keyBindingShell.remove
$.on := keyBindingShell.add
$.trigger := keyBindingShell.fire
$.length := Func("shell_29")
$.move := Func("shell_28")
$.now := Func("shell_27")
$.open := Func("shell_26")
$.play := Func("shell_25")
$.press := Func("shell_24")
$.push := Func("shell_23")
$.random := Func("shell_22")
$.reload := Func("shell_21")
$.replace := Func("shell_20")
$.reverse := Func("shell_19")
$.round := Func("shell_18")
$.setFixed := Func("shell_17")
$.setInterval := Func("shell_16")
$.setTimeout := Func("shell_15")
$.sleep := Func("shell_14")
$.split := Func("shell_13")
$.suspend := Func("shell_12")
$.take := Func("shell_11")
global __index_throttle__ := 0
global __timer_throttle__ := {}
global __ts_throttle__ := {}
$.throttle := Func("shell_10")
$.toLowerCase := Func("shell_7")
$.toString := Func("shell_6")
$.toUpperCase := Func("shell_5")
$.trim := Func("shell_4")
$.trimEnd := Func("shell_3")
$.trimStart := Func("shell_2")
$.type := Func("shell_1")
$.VERSION := "0.0.2"
shell_1(input) {
  if input is Number
    return "number"
  if (IsFunc(input)) {
    return "function"
  }
  if (IsObject(input)) {
    if (input.Count() == input.Length()) {
      return "array"
    }
    return "object"
  }
  return "string"
}
shell_2(input, omitting := " `t") {
  return LTrim(input, omitting)
}
shell_3(input, omitting := " `t") {
  return RTrim(input, omitting)
}
shell_4(input, omitting := " `t") {
  return Trim(input, omitting)
}
shell_5(input) {
  StringUpper, __result__, input
  return __result__
}
shell_6(input) {
  __type__ := $.type.Call(input)
  if (__type__ == "array") {
    __result__ := ""
    for __index_for__, key in input {
      __result__ := "" . (__result__) . ", " . ($.toString.Call(key)) . ""
    }
    return "[" . ($.trim.Call(__result__, " ,")) . "]"
  } else if (__type__ == "object") {
    __result__ := ""
    for key, value in input {
      __result__ := "" . (__result__) . ", " . (key) . ": " . ($.toString.Call(value)) . ""
    }
    return "{" . ($.trim.Call(__result__, " ,")) . "}"
  }
  return input
}
shell_7(input) {
  StringLower, __result__, input
  return __result__
}
shell_8(callback, index) {
  callback.Call()
  __ts_throttle__[__ci_shell__.Call(index)] := $.now.Call()
}
shell_9(callback, time, index) {
  $.clearTimeout.Call(__timer_throttle__[__ci_shell__.Call(index)])
  __timer_throttle__[__ci_shell__.Call(index)] := $.setTimeout.Call(Func("shell_8").Bind(callback, index), __ts_throttle__[__ci_shell__.Call(index)] - $.now.Call() + time)
}
shell_10(time, callback) {
  __index_throttle__++
  __ts_throttle__[__ci_shell__.Call(__index_throttle__)] := 0
  return Func("shell_9").Bind(callback, time, __index_throttle__)
}
shell_11(list, count := 1) {
  __len__ := $.length.Call(list)
  if !(__len__) {
    return []
  }
  if !(count >= 0) {
    return []
  }
  if (count >= __len__) {
    count := __len__
  }
  __listNew__ := []
  for __i__, __item__ in list {
    if (__i__ >= count + 1) {
      break
    }
    $.push.Call(__listNew__, __item__)
  }
  return __listNew__
}
shell_12(isSuspended := "Toggle") {
  if (isSuspended != "Toggle") {
    if (isSuspended) {
      isSuspended := "On"
    } else {
      isSuspended := "Off"
    }
  }
  Suspend, % isSuspended
}
shell_13(input, delimiter) {
  return StrSplit(input, delimiter)
}
shell_14(time) {
  Sleep, % time
}
shell_15(callback, time) {
  if (($.type.Call(callback)) == "function") {
    callback := callback.Bind()
  }
  __type__ := $.type.Call(time)
  if !(__type__ == "number") {
    throw Exception("setTimeout: invalid time type '" . (__type__) . "'")
  }
  if (time <= 0) {
    time := 1
  }
  SetTimer, % callback, % 0 - time
  return callback
}
shell_16(callback, time) {
  if (($.type.Call(callback)) == "function") {
    callback := callback.Bind()
  }
  __type__ := $.type.Call(time)
  if !(__type__ == "number") {
    throw Exception("setTimeout: invalid time type '" . (__type__) . "'")
  }
  if !(time > 0) {
    throw Exception("setTimeout: invalid time value '" . (time) . "'")
  }
  SetTimer, % callback, % time
  return callback
}
shell_17(isFixed := "Toggle") {
  if (isFixed != "Toggle") {
    if (isFixed) {
      isFixed := "On"
    } else {
      isFixed := "Off"
    }
  }
  Winset AlwaysOnTop, % isFixed, A
}
shell_18(n) {
  return Round(n)
}
shell_19(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "array") {
    throw Exception("$.reverse: invalid type '" . (__type__) . "'")
  }
  __len__ := $.length.Call(input)
  __output_as_array__ := []
  for i, key in input {
    i := i - 1
    __output_as_array__[__ci_shell__.Call(__len__ - 1 - i)] := key
  }
  return __output_as_array__
}
shell_20(input, searchment, replacement, limit := -1) {
  return StrReplace(input, searchment, replacement, limit)
}
shell_21() {
  Reload
}
shell_22(min := 0, max := 1) {
  Random, __result__, min, max
  return __result__
}
shell_23(list, item) {
  list.Push(item)
  return list
}
shell_24(listInput*) {
  if !($.length.Call(listInput)) {
    throw Exception("$.press: invalid key")
  }
  __listKey__ := []
  for __index_for__, input in listInput {
    __input__ := $.toLowerCase.Call(input)
    __input__ := $.replace.Call(__input__, " ", "")
    __input__ := $.replace.Call(__input__, "-", "")
    __list__ := $.split.Call(__input__, "+")
    for __index_for__, it in __list__ {
      $.push.Call(__listKey__, it)
    }
  }
  __listResult__ := []
  __len__ := $.length.Call(__listKey__)
  for i, key in __listKey__ {
    i := i - 1
    if (i == __len__ - 1) {
      __listResult__[__ci_shell__.Call(i)] := $.split.Call(key, ":")
      continue
    }
    if ($.includes.Call(key, ":")) {
      __listResult__[__ci_shell__.Call(i)] := $.split.Call(key, ":")
      __listResult__[__ci_shell__.Call((__len__ - 1) * 2 - i)] := $.split.Call(key, ":")
    } else {
      __listResult__[__ci_shell__.Call(i)] := [key, "down"]
      __listResult__[__ci_shell__.Call((__len__ - 1) * 2 - i)] := [key, "up"]
    }
  }
  for i, it in __listResult__ {
    i := i - 1
    if (it[1] == "win") {
      it[1] := "lwin"
    }
    __listResult__[__ci_shell__.Call(i)] := $.trim.Call("" . (it[1]) . " " . (it[2]) . "")
  }
  __output_as_string__ := ""
  for __index_for__, it in __listResult__ {
    __output_as_string__ := "" . (__output_as_string__) . "{" . (it) . "}"
  }
  Send, % __output_as_string__
}
shell_25(filename) {
  SoundPlay, % filename
}
shell_26(source) {
  Run, % source
}
shell_27() {
  return A_TickCount
}
shell_28(point := "", speed := 0) {
  if !(point) {
    throw Exception("$.move: invalid point")
  }
  MouseMove, point[1], point[2], speed
}
shell_29(input) {
  __type__ := $.type.Call(input)
  switch __type__ {
    case "array": {
      return input.Length()
    }
    case "object": {
      return input.Count()
    }
    case "string": {
      return StrLen(input)
    }
    default: {
      throw Exception("$.length: invalid type '" . (__type__) . "'")
    }
  }
}
shell_30(this, key) {
  __array__ := $.split.Call(key, ".")
  key := __array__[1]
  __name__ := __array__[2]
  if !(__name__) {
    this.mapCallback[__ci_shell__.Call(key)] := ""
    this.off.Call(key, this.mapBound[__ci_shell__.Call(key)])
    return $
  }
  __listNew__ := []
  for __index_for__, __item__ in this.mapCallback[__ci_shell__.Call(key)] {
    if (__item__[1] == __name__) {
      continue
    }
    $.push.Call(__listNew__, __item__)
  }
  if !($.length.Call(__listNew__)) {
    this.mapCallback[__ci_shell__.Call(key)] := ""
    this.off.Call(key, this.mapBound[__ci_shell__.Call(key)])
    return $
  }
  this.mapCallback[__ci_shell__.Call(key)] := __listNew__
  return $
}
shell_31(this, key, callback) {
  key := $.formatHotkey.Call(key)
  Hotkey, % key, % callback, On
  return $
}
shell_32(this, key, callback) {
  key := $.formatHotkey.Call(key)
  Hotkey, % key, % callback, Off
  return $
}
shell_33(key, this) {
  this.fire.Call(key)
}
shell_34(this, key) {
  if (this.mapCallback[__ci_shell__.Call(key)]) {
    return $
  }
  this.mapCallback[__ci_shell__.Call(key)] := []
  __fn__ := Func("shell_33").Bind(key, this)
  this.mapBound[__ci_shell__.Call(key)] := __fn__
  this.on.Call(key, __fn__)
}
shell_35(this, key) {
  __array__ := $.split.Call(($.replace.Call(key, ":down", "")), ".")
  key := __array__[1]
  __name__ := __array__[2]
  if !(__name__) {
    for __index_for__, __item__ in this.mapCallback[__ci_shell__.Call(key)] {
      __item__[2].Call()
    }
    return $
  }
  for __index_for__, __item__ in this.mapCallback[__ci_shell__.Call(key)] {
    if !(__item__[1] == __name__) {
      continue
    }
    __item__[2].Call()
  }
  return $
}
shell_36(this, key, callback) {
  __array__ := $.split.Call(key, ".")
  key := __array__[1]
  __name__ := __array__[2]
  this.init.Call(key)
  $.push.Call(this.mapCallback[__ci_shell__.Call(key)], [__name__, callback])
  return $
}
shell_37(message, point := "") {
  if !(message) {
    return message
  }
  if !(point) {
    point := $.getPosition.Call()
  }
  __msg__ := $.toString.Call(message)
  ToolTip, % __msg__, % point[1], % point[2]
  return message
}
shell_38(input, needle) {
  __type__ := $.type.Call(input)
  if (__type__ == "string" || __type__ == "number") {
    return (InStr(input, needle)) > 0
  }
  if (__type__ == "array") {
    for __index_for__, it in input {
      if (it == needle) {
        return true
      }
    }
    return false
  }
  throw Exception("$.includes: invalid type '" . (__type__) . "'")
}
shell_39(message) {
  $.info.Call("[" . ($.now.Call()) . "] " . ($.toString.Call(message)) . "", [0, 0])
  return message
}
shell_40(key) {
  key := $.formatHotkey.Call(key)
  return GetKeyState(key, "P")
}
shell_41() {
  MouseGetPos, __x__, __y__
  return [__x__, __y__]
}
shell_42(point := "") {
  if !(point) {
    point := $.getPosition.Call()
  }
  PixelGetColor, __result__, % point[1], % point[2], RGB
  return __result__
}
shell_43(key) {
  __listkey__ := []
  __key__ := $.toLowerCase.Call(key)
  __key__ := $.replace.Call(__key__, " ", "")
  __key__ := $.replace.Call(__key__, "-", "")
  _list := $.split.Call(__key__, "+")
  for __index_for__, it in _list {
    $.push.Call(__listkey__, it)
  }
  __isAlt__ := false
  __isCtrl__ := false
  __isShift__ := false
  __isWin__ := false
  __listResult__ := []
  for __index_for__, key in __listkey__ {
    if (key == "alt") {
      __isAlt__ := true
      continue
    }
    if (key == "ctrl") {
      __isCtrl__ := true
      continue
    }
    if (key == "shift") {
      __isShift__ := true
      continue
    }
    if (key == "win") {
      __isWin__ := true
      continue
    }
    $.push.Call(__listResult__, key)
  }
  __prefix__ := ""
  if (__isAlt__) {
    __prefix__ := "" . (__prefix__) . "!"
  }
  if (__isCtrl__) {
    __prefix__ := "" . (__prefix__) . "^"
  }
  if (__isShift__) {
    __prefix__ := "" . (__prefix__) . "+"
  }
  if (__isWin__) {
    __prefix__ := "" . (__prefix__) . "#"
  }
  __result__ := ""
  for __index_for__, it in __listResult__ {
    __result__ := "" . (__result__) . " & " . (it) . ""
  }
  return $.replace.Call("" . (__prefix__) . "" . ($.trim.Call(__result__, " &")) . "", ":", " ")
}
shell_44(n) {
  return Floor(n)
}
shell_45(source, start := "", end := "") {
  if !(start) {
    start := [0, 0]
  }
  if !(end) {
    end := [A_ScreenWidth, A_ScreenHeight]
  }
  ImageSearch __x__, __y__, start[1], start[2], end[1], end[2], % A_ScriptDir . "\\\" . source
  return [__x__, __y__]
}
shell_46(color, start := "", end := "", variation := 0) {
  if !(start) {
    start := [0, 0]
  }
  if !(end) {
    end := [A_ScreenWidth, A_ScreenHeight]
  }
  PixelSearch __x__, __y__, start[1], start[2], end[1], end[2], color, variation, Fast RGB
  return [__x__, __y__]
}
shell_47(name) {
  return new FileShellX(name)
}
shell_48(this, content) {
  this.delete.Call()
  return this.append.Call(content)
}
shell_49(this) {
  if !(this.exist.Call()) {
    return ""
  }
  FileRead, __result__, % this.name
  return $.replace.Call(__result__, "`r", "")
}
shell_50(this) {
  if !(this.exist.Call()) {
    return this
  }
  FileDelete, % this.name
  return this
}
shell_51(this) {
  if !(FileExist(this.name)) {
    return false
  }
  return true
}
shell_52(this, content) {
  FileAppend, % content, % this.name, UTF-8
  return content
}
shell_53() {
  ExitApp
}
shell_54() {
  return new EmitterShellX
}
shell_55(this, key, callback) {
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  $.push.Call(this.bus, [__type__, __name__, callback])
  return this
}
shell_56(this, key) {
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  if !(__type__) {
    this.bus := []
    return this
  }
  if !(__name__) {
    __busNew__ := []
    for __index_for__, __item__ in this.bus {
      if (__item__[1] == __type__) {
        continue
      }
      $.push.Call(__busNew__, __item__)
    }
    this.bus := __busNew__
    return this
  }
  __busNew__ := []
  for __index_for__, __item__ in this.bus {
    if (__item__[1] == __type__ && __item__[2] == __name__) {
      continue
    }
    $.push.Call(__busNew__, __item__)
  }
  this.bus := __busNew__
  return this
}
shell_57(this, key, args*) {
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  if !(__type__) {
    return this
  }
  if !(__name__) {
    for __index_for__, __item__ in this.bus {
      if !(__item__[1] == __type__) {
        continue
      }
      __item__[3].Call(args*)
    }
    return this
  }
  for __index_for__, __item__ in this.bus {
    if !(__item__[1] == __type__ && __item__[2] == __name__) {
      continue
    }
    __item__[3].Call(args*)
  }
  return this
}
shell_58(time, callback) {
  __timer__ := $.setTimeout.Call(callback, time)
  return __timer__
}
shell_59(callback, time, index) {
  $.clearTimeout.Call(__timer_debounce__[__ci_shell__.Call(index)])
  __timer_debounce__[__ci_shell__.Call(index)] := $.setTimeout.Call(callback, time)
}
shell_60(time, callback) {
  __index_debounce__++
  return Func("shell_59").Bind(callback, time, __index_debounce__)
}
shell_61(key := "left") {
  key := $.replace.Call(key, "-", "")
  key := $.replace.Call(key, ":", " ")
  Click, % key
}
shell_62(callback) {
  if !(callback) {
    return
  }
  SetTimer, % callback, Delete
}
shell_63(callback) {
  if !(callback) {
    return
  }
  SetTimer, % callback, Delete
}
shell_64(n) {
  return Ceil(n)
}
shell_65(block) {
  if (block) {
    BlockInput, On
    return
  }
  BlockInput, Off
}
shell_66() {
  SoundBeep
}
shell_67(message := "") {
  __msg__ := $.toString.Call(message)
  MsgBox, % __msg__
  return message
}
shell_68(n) {
  return Abs(n)
}
shell_69(input) {
  if input is Number
    return input + 1
  return input
}
